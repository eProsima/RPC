// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file MessageHeader.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "MessageHeader.h"

#if FASTCDR_VERSION_MAJOR > 1

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace eprosima {

namespace rpc {

namespace protocol {

namespace dds {




EntityId_t::EntityId_t()
{
}

EntityId_t::~EntityId_t()
{
}

EntityId_t::EntityId_t(
        const EntityId_t& x)
{
    m_entityKey = x.m_entityKey;
    m_entityKind = x.m_entityKind;
}

EntityId_t::EntityId_t(
        EntityId_t&& x) noexcept
{
    m_entityKey = std::move(x.m_entityKey);
    m_entityKind = x.m_entityKind;
}

EntityId_t& EntityId_t::operator =(
        const EntityId_t& x)
{

    m_entityKey = x.m_entityKey;
    m_entityKind = x.m_entityKind;
    return *this;
}

EntityId_t& EntityId_t::operator =(
        EntityId_t&& x) noexcept
{

    m_entityKey = std::move(x.m_entityKey);
    m_entityKind = x.m_entityKind;
    return *this;
}

bool EntityId_t::operator ==(
        const EntityId_t& x) const
{
    return (m_entityKey == x.m_entityKey &&
           m_entityKind == x.m_entityKind);
}

bool EntityId_t::operator !=(
        const EntityId_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member entityKey
 * @param _entityKey New value to be copied in member entityKey
 */
void EntityId_t::entityKey(
        const std::array<uint8_t, 3>& _entityKey)
{
    m_entityKey = _entityKey;
}

/*!
 * @brief This function moves the value in member entityKey
 * @param _entityKey New value to be moved in member entityKey
 */
void EntityId_t::entityKey(
        std::array<uint8_t, 3>&& _entityKey)
{
    m_entityKey = std::move(_entityKey);
}

/*!
 * @brief This function returns a constant reference to member entityKey
 * @return Constant reference to member entityKey
 */
const std::array<uint8_t, 3>& EntityId_t::entityKey() const
{
    return m_entityKey;
}

/*!
 * @brief This function returns a reference to member entityKey
 * @return Reference to member entityKey
 */
std::array<uint8_t, 3>& EntityId_t::entityKey()
{
    return m_entityKey;
}


/*!
 * @brief This function sets a value in member entityKind
 * @param _entityKind New value for member entityKind
 */
void EntityId_t::entityKind(
        uint8_t _entityKind)
{
    m_entityKind = _entityKind;
}

/*!
 * @brief This function returns the value of member entityKind
 * @return Value of member entityKind
 */
uint8_t EntityId_t::entityKind() const
{
    return m_entityKind;
}

/*!
 * @brief This function returns a reference to member entityKind
 * @return Reference to member entityKind
 */
uint8_t& EntityId_t::entityKind()
{
    return m_entityKind;
}




GUID_t::GUID_t()
{
}

GUID_t::~GUID_t()
{
}

GUID_t::GUID_t(
        const GUID_t& x)
{
    m_guidPrefix = x.m_guidPrefix;
    m_entityId = x.m_entityId;
}

GUID_t::GUID_t(
        GUID_t&& x) noexcept
{
    m_guidPrefix = std::move(x.m_guidPrefix);
    m_entityId = std::move(x.m_entityId);
}

GUID_t& GUID_t::operator =(
        const GUID_t& x)
{

    m_guidPrefix = x.m_guidPrefix;
    m_entityId = x.m_entityId;
    return *this;
}

GUID_t& GUID_t::operator =(
        GUID_t&& x) noexcept
{

    m_guidPrefix = std::move(x.m_guidPrefix);
    m_entityId = std::move(x.m_entityId);
    return *this;
}

bool GUID_t::operator ==(
        const GUID_t& x) const
{
    return (m_guidPrefix == x.m_guidPrefix &&
           m_entityId == x.m_entityId);
}

bool GUID_t::operator !=(
        const GUID_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member guidPrefix
 * @param _guidPrefix New value to be copied in member guidPrefix
 */
void GUID_t::guidPrefix(
        const eprosima::rpc::protocol::dds::GuidPrefix_t& _guidPrefix)
{
    m_guidPrefix = _guidPrefix;
}

/*!
 * @brief This function moves the value in member guidPrefix
 * @param _guidPrefix New value to be moved in member guidPrefix
 */
void GUID_t::guidPrefix(
        eprosima::rpc::protocol::dds::GuidPrefix_t&& _guidPrefix)
{
    m_guidPrefix = std::move(_guidPrefix);
}

/*!
 * @brief This function returns a constant reference to member guidPrefix
 * @return Constant reference to member guidPrefix
 */
const eprosima::rpc::protocol::dds::GuidPrefix_t& GUID_t::guidPrefix() const
{
    return m_guidPrefix;
}

/*!
 * @brief This function returns a reference to member guidPrefix
 * @return Reference to member guidPrefix
 */
eprosima::rpc::protocol::dds::GuidPrefix_t& GUID_t::guidPrefix()
{
    return m_guidPrefix;
}


/*!
 * @brief This function copies the value in member entityId
 * @param _entityId New value to be copied in member entityId
 */
void GUID_t::entityId(
        const eprosima::rpc::protocol::dds::EntityId_t& _entityId)
{
    m_entityId = _entityId;
}

/*!
 * @brief This function moves the value in member entityId
 * @param _entityId New value to be moved in member entityId
 */
void GUID_t::entityId(
        eprosima::rpc::protocol::dds::EntityId_t&& _entityId)
{
    m_entityId = std::move(_entityId);
}

/*!
 * @brief This function returns a constant reference to member entityId
 * @return Constant reference to member entityId
 */
const eprosima::rpc::protocol::dds::EntityId_t& GUID_t::entityId() const
{
    return m_entityId;
}

/*!
 * @brief This function returns a reference to member entityId
 * @return Reference to member entityId
 */
eprosima::rpc::protocol::dds::EntityId_t& GUID_t::entityId()
{
    return m_entityId;
}




SequenceNumber_t::SequenceNumber_t()
{
}

SequenceNumber_t::~SequenceNumber_t()
{
}

SequenceNumber_t::SequenceNumber_t(
        const SequenceNumber_t& x)
{
    m_high = x.m_high;
    m_low = x.m_low;
}

SequenceNumber_t::SequenceNumber_t(
        SequenceNumber_t&& x) noexcept
{
    m_high = x.m_high;
    m_low = x.m_low;
}

SequenceNumber_t& SequenceNumber_t::operator =(
        const SequenceNumber_t& x)
{

    m_high = x.m_high;
    m_low = x.m_low;
    return *this;
}

SequenceNumber_t& SequenceNumber_t::operator =(
        SequenceNumber_t&& x) noexcept
{

    m_high = x.m_high;
    m_low = x.m_low;
    return *this;
}

bool SequenceNumber_t::operator ==(
        const SequenceNumber_t& x) const
{
    return (m_high == x.m_high &&
           m_low == x.m_low);
}

bool SequenceNumber_t::operator !=(
        const SequenceNumber_t& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member high
 * @param _high New value for member high
 */
void SequenceNumber_t::high(
        int32_t _high)
{
    m_high = _high;
}

/*!
 * @brief This function returns the value of member high
 * @return Value of member high
 */
int32_t SequenceNumber_t::high() const
{
    return m_high;
}

/*!
 * @brief This function returns a reference to member high
 * @return Reference to member high
 */
int32_t& SequenceNumber_t::high()
{
    return m_high;
}


/*!
 * @brief This function sets a value in member low
 * @param _low New value for member low
 */
void SequenceNumber_t::low(
        uint32_t _low)
{
    m_low = _low;
}

/*!
 * @brief This function returns the value of member low
 * @return Value of member low
 */
uint32_t SequenceNumber_t::low() const
{
    return m_low;
}

/*!
 * @brief This function returns a reference to member low
 * @return Reference to member low
 */
uint32_t& SequenceNumber_t::low()
{
    return m_low;
}




SampleIdentity::SampleIdentity()
{
}

SampleIdentity::~SampleIdentity()
{
}

SampleIdentity::SampleIdentity(
        const SampleIdentity& x)
{
    m_writer_guid = x.m_writer_guid;
    m_sequence_number = x.m_sequence_number;
}

SampleIdentity::SampleIdentity(
        SampleIdentity&& x) noexcept
{
    m_writer_guid = std::move(x.m_writer_guid);
    m_sequence_number = std::move(x.m_sequence_number);
}

SampleIdentity& SampleIdentity::operator =(
        const SampleIdentity& x)
{

    m_writer_guid = x.m_writer_guid;
    m_sequence_number = x.m_sequence_number;
    return *this;
}

SampleIdentity& SampleIdentity::operator =(
        SampleIdentity&& x) noexcept
{

    m_writer_guid = std::move(x.m_writer_guid);
    m_sequence_number = std::move(x.m_sequence_number);
    return *this;
}

bool SampleIdentity::operator ==(
        const SampleIdentity& x) const
{
    return (m_writer_guid == x.m_writer_guid &&
           m_sequence_number == x.m_sequence_number);
}

bool SampleIdentity::operator !=(
        const SampleIdentity& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member writer_guid
 * @param _writer_guid New value to be copied in member writer_guid
 */
void SampleIdentity::writer_guid(
        const eprosima::rpc::protocol::dds::GUID_t& _writer_guid)
{
    m_writer_guid = _writer_guid;
}

/*!
 * @brief This function moves the value in member writer_guid
 * @param _writer_guid New value to be moved in member writer_guid
 */
void SampleIdentity::writer_guid(
        eprosima::rpc::protocol::dds::GUID_t&& _writer_guid)
{
    m_writer_guid = std::move(_writer_guid);
}

/*!
 * @brief This function returns a constant reference to member writer_guid
 * @return Constant reference to member writer_guid
 */
const eprosima::rpc::protocol::dds::GUID_t& SampleIdentity::writer_guid() const
{
    return m_writer_guid;
}

/*!
 * @brief This function returns a reference to member writer_guid
 * @return Reference to member writer_guid
 */
eprosima::rpc::protocol::dds::GUID_t& SampleIdentity::writer_guid()
{
    return m_writer_guid;
}


/*!
 * @brief This function copies the value in member sequence_number
 * @param _sequence_number New value to be copied in member sequence_number
 */
void SampleIdentity::sequence_number(
        const eprosima::rpc::protocol::dds::SequenceNumber_t& _sequence_number)
{
    m_sequence_number = _sequence_number;
}

/*!
 * @brief This function moves the value in member sequence_number
 * @param _sequence_number New value to be moved in member sequence_number
 */
void SampleIdentity::sequence_number(
        eprosima::rpc::protocol::dds::SequenceNumber_t&& _sequence_number)
{
    m_sequence_number = std::move(_sequence_number);
}

/*!
 * @brief This function returns a constant reference to member sequence_number
 * @return Constant reference to member sequence_number
 */
const eprosima::rpc::protocol::dds::SequenceNumber_t& SampleIdentity::sequence_number() const
{
    return m_sequence_number;
}

/*!
 * @brief This function returns a reference to member sequence_number
 * @return Reference to member sequence_number
 */
eprosima::rpc::protocol::dds::SequenceNumber_t& SampleIdentity::sequence_number()
{
    return m_sequence_number;
}


namespace rpc {



RequestHeader::RequestHeader()
{
}

RequestHeader::~RequestHeader()
{
}

RequestHeader::RequestHeader(
        const RequestHeader& x)
{
    m_requestId = x.m_requestId;
    m_instanceName = x.m_instanceName;
}

RequestHeader::RequestHeader(
        RequestHeader&& x) noexcept
{
    m_requestId = std::move(x.m_requestId);
    m_instanceName = std::move(x.m_instanceName);
}

RequestHeader& RequestHeader::operator =(
        const RequestHeader& x)
{

    m_requestId = x.m_requestId;
    m_instanceName = x.m_instanceName;
    return *this;
}

RequestHeader& RequestHeader::operator =(
        RequestHeader&& x) noexcept
{

    m_requestId = std::move(x.m_requestId);
    m_instanceName = std::move(x.m_instanceName);
    return *this;
}

bool RequestHeader::operator ==(
        const RequestHeader& x) const
{
    return (m_requestId == x.m_requestId &&
           m_instanceName == x.m_instanceName);
}

bool RequestHeader::operator !=(
        const RequestHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member requestId
 * @param _requestId New value to be copied in member requestId
 */
void RequestHeader::requestId(
        const eprosima::rpc::protocol::dds::SampleIdentity& _requestId)
{
    m_requestId = _requestId;
}

/*!
 * @brief This function moves the value in member requestId
 * @param _requestId New value to be moved in member requestId
 */
void RequestHeader::requestId(
        eprosima::rpc::protocol::dds::SampleIdentity&& _requestId)
{
    m_requestId = std::move(_requestId);
}

/*!
 * @brief This function returns a constant reference to member requestId
 * @return Constant reference to member requestId
 */
const eprosima::rpc::protocol::dds::SampleIdentity& RequestHeader::requestId() const
{
    return m_requestId;
}

/*!
 * @brief This function returns a reference to member requestId
 * @return Reference to member requestId
 */
eprosima::rpc::protocol::dds::SampleIdentity& RequestHeader::requestId()
{
    return m_requestId;
}


/*!
 * @brief This function copies the value in member instanceName
 * @param _instanceName New value to be copied in member instanceName
 */
void RequestHeader::instanceName(
        const eprosima::fastcdr::fixed_string<255>& _instanceName)
{
    m_instanceName = _instanceName;
}

/*!
 * @brief This function moves the value in member instanceName
 * @param _instanceName New value to be moved in member instanceName
 */
void RequestHeader::instanceName(
        eprosima::fastcdr::fixed_string<255>&& _instanceName)
{
    m_instanceName = std::move(_instanceName);
}

/*!
 * @brief This function returns a constant reference to member instanceName
 * @return Constant reference to member instanceName
 */
const eprosima::fastcdr::fixed_string<255>& RequestHeader::instanceName() const
{
    return m_instanceName;
}

/*!
 * @brief This function returns a reference to member instanceName
 * @return Reference to member instanceName
 */
eprosima::fastcdr::fixed_string<255>& RequestHeader::instanceName()
{
    return m_instanceName;
}




ReplyHeader::ReplyHeader()
{
}

ReplyHeader::~ReplyHeader()
{
}

ReplyHeader::ReplyHeader(
        const ReplyHeader& x)
{
    m_relatedRequestId = x.m_relatedRequestId;
    m_remoteEx = x.m_remoteEx;
}

ReplyHeader::ReplyHeader(
        ReplyHeader&& x) noexcept
{
    m_relatedRequestId = std::move(x.m_relatedRequestId);
    m_remoteEx = x.m_remoteEx;
}

ReplyHeader& ReplyHeader::operator =(
        const ReplyHeader& x)
{

    m_relatedRequestId = x.m_relatedRequestId;
    m_remoteEx = x.m_remoteEx;
    return *this;
}

ReplyHeader& ReplyHeader::operator =(
        ReplyHeader&& x) noexcept
{

    m_relatedRequestId = std::move(x.m_relatedRequestId);
    m_remoteEx = x.m_remoteEx;
    return *this;
}

bool ReplyHeader::operator ==(
        const ReplyHeader& x) const
{
    return (m_relatedRequestId == x.m_relatedRequestId &&
           m_remoteEx == x.m_remoteEx);
}

bool ReplyHeader::operator !=(
        const ReplyHeader& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member relatedRequestId
 * @param _relatedRequestId New value to be copied in member relatedRequestId
 */
void ReplyHeader::relatedRequestId(
        const eprosima::rpc::protocol::dds::SampleIdentity& _relatedRequestId)
{
    m_relatedRequestId = _relatedRequestId;
}

/*!
 * @brief This function moves the value in member relatedRequestId
 * @param _relatedRequestId New value to be moved in member relatedRequestId
 */
void ReplyHeader::relatedRequestId(
        eprosima::rpc::protocol::dds::SampleIdentity&& _relatedRequestId)
{
    m_relatedRequestId = std::move(_relatedRequestId);
}

/*!
 * @brief This function returns a constant reference to member relatedRequestId
 * @return Constant reference to member relatedRequestId
 */
const eprosima::rpc::protocol::dds::SampleIdentity& ReplyHeader::relatedRequestId() const
{
    return m_relatedRequestId;
}

/*!
 * @brief This function returns a reference to member relatedRequestId
 * @return Reference to member relatedRequestId
 */
eprosima::rpc::protocol::dds::SampleIdentity& ReplyHeader::relatedRequestId()
{
    return m_relatedRequestId;
}


/*!
 * @brief This function sets a value in member remoteEx
 * @param _remoteEx New value for member remoteEx
 */
void ReplyHeader::remoteEx(
        eprosima::rpc::protocol::dds::rpc::RemoteExceptionCode_t _remoteEx)
{
    m_remoteEx = _remoteEx;
}

/*!
 * @brief This function returns the value of member remoteEx
 * @return Value of member remoteEx
 */
eprosima::rpc::protocol::dds::rpc::RemoteExceptionCode_t ReplyHeader::remoteEx() const
{
    return m_remoteEx;
}

/*!
 * @brief This function returns a reference to member remoteEx
 * @return Reference to member remoteEx
 */
eprosima::rpc::protocol::dds::rpc::RemoteExceptionCode_t& ReplyHeader::remoteEx()
{
    return m_remoteEx;
}




} // namespace rpc


} // namespace dds

} // namespace protocol

} // namespace rpc

} // namespace eprosima


#endif // FASTCDR_VERSION_MAJOR > 1
