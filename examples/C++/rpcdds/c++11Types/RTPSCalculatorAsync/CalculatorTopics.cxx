// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CalculatorTopics.cpp
 * This source file contains the implementation of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorTopics.h"

#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
#include <rpcdds/exceptions/BadParamException.h>

Calculator_addition_In::Calculator_addition_In()
: 
m_value1(0)
, 
m_value2(0)

{
}

Calculator_addition_In::~Calculator_addition_In()
{
}

Calculator_addition_In::Calculator_addition_In(const Calculator_addition_In &x)
: m_value1(x.m_value1), m_value2(x.m_value2)
{
}

Calculator_addition_In::Calculator_addition_In(Calculator_addition_In &&x)
: m_value1(std::move(x.m_value1)), m_value2(std::move(x.m_value2))
{
}

Calculator_addition_In& Calculator_addition_In::operator=(const Calculator_addition_In &x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    return *this;
}

Calculator_addition_In& Calculator_addition_In::operator=(Calculator_addition_In &&x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    return *this;
}

Calculator_addition_Request::Calculator_addition_Request()
{
}

Calculator_addition_Request::~Calculator_addition_Request()
{
}

Calculator_addition_Request::Calculator_addition_Request(const Calculator_addition_Request &x)
: m_header(x.m_header), m_addition(x.m_addition)
{
}

Calculator_addition_Request::Calculator_addition_Request(Calculator_addition_Request &&x)
: m_header(std::move(x.m_header)), m_addition(std::move(x.m_addition))
{
}

Calculator_addition_Request& Calculator_addition_Request::operator=(const Calculator_addition_Request &x)
{
    m_header = x.m_header;
    m_addition = x.m_addition;

    return *this;
}

Calculator_addition_Request& Calculator_addition_Request::operator=(Calculator_addition_Request &&x)
{
    m_header = std::move(x.m_header);
    m_addition = std::move(x.m_addition);

    return *this;
}

Calculator_addition_Out::Calculator_addition_Out()
: 
m_return_(0)

{
}

Calculator_addition_Out::~Calculator_addition_Out()
{
}

Calculator_addition_Out::Calculator_addition_Out(const Calculator_addition_Out &x)
: m_return_(x.m_return_)
{
}

Calculator_addition_Out::Calculator_addition_Out(Calculator_addition_Out &&x)
: m_return_(std::move(x.m_return_))
{
}

Calculator_addition_Out& Calculator_addition_Out::operator=(const Calculator_addition_Out &x)
{
    m_return_ = x.m_return_;;
    return *this;
}

Calculator_addition_Out& Calculator_addition_Out::operator=(Calculator_addition_Out &&x)
{
    m_return_ = x.m_return_;;
    return *this;
}

Calculator_addition_Result::Calculator_addition_Result() : m__d(2)
{
}

Calculator_addition_Result::~Calculator_addition_Result()
{
}

Calculator_addition_Result::Calculator_addition_Result(const Calculator_addition_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
    }
}

Calculator_addition_Result::Calculator_addition_Result(Calculator_addition_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
    }
}

Calculator_addition_Result& Calculator_addition_Result::operator=(const Calculator_addition_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
    }

    return *this;
}

Calculator_addition_Result& Calculator_addition_Result::operator=(Calculator_addition_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
    }

    return *this;
}

void Calculator_addition_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_addition_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_addition_Result::_d()
{
    return m__d;
}

void Calculator_addition_Result::unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx)
{
    m_unknownEx = _unknownEx;
    m__d = 2;
}

eprosima::rpc::protocol::dds::rpc::UnknownException Calculator_addition_Result::unknownEx() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
}

eprosima::rpc::protocol::dds::rpc::UnknownException& Calculator_addition_Result::unknownEx()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
}

void Calculator_addition_Result::result(const Calculator_addition_Out &_result)
{
    m_result = _result;
    m__d = 0;
}

void Calculator_addition_Result::result(Calculator_addition_Out &&_result)
{
    m_result = std::move(_result);
    m__d = 0;
}

const Calculator_addition_Out& Calculator_addition_Result::result() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
}

Calculator_addition_Out& Calculator_addition_Result::result()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
}


Calculator_addition_Reply::Calculator_addition_Reply()
{
}

Calculator_addition_Reply::~Calculator_addition_Reply()
{
}

Calculator_addition_Reply::Calculator_addition_Reply(const Calculator_addition_Reply &x)
: m_header(x.m_header), m_addition(x.m_addition)
{
}

Calculator_addition_Reply::Calculator_addition_Reply(Calculator_addition_Reply &&x)
: m_header(std::move(x.m_header)), m_addition(std::move(x.m_addition))
{
}

Calculator_addition_Reply& Calculator_addition_Reply::operator=(const Calculator_addition_Reply &x)
{
    m_header = x.m_header;
    m_addition = x.m_addition;

    return *this;
}

Calculator_addition_Reply& Calculator_addition_Reply::operator=(Calculator_addition_Reply &&x)
{
    m_header = std::move(x.m_header);
    m_addition = std::move(x.m_addition);

    return *this;
}

Calculator_subtraction_In::Calculator_subtraction_In()
: 
m_value1(0)
, 
m_value2(0)

{
}

Calculator_subtraction_In::~Calculator_subtraction_In()
{
}

Calculator_subtraction_In::Calculator_subtraction_In(const Calculator_subtraction_In &x)
: m_value1(x.m_value1), m_value2(x.m_value2)
{
}

Calculator_subtraction_In::Calculator_subtraction_In(Calculator_subtraction_In &&x)
: m_value1(std::move(x.m_value1)), m_value2(std::move(x.m_value2))
{
}

Calculator_subtraction_In& Calculator_subtraction_In::operator=(const Calculator_subtraction_In &x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    return *this;
}

Calculator_subtraction_In& Calculator_subtraction_In::operator=(Calculator_subtraction_In &&x)
{
    m_value1 = x.m_value1;;
    m_value2 = x.m_value2;;
    return *this;
}

Calculator_subtraction_Request::Calculator_subtraction_Request()
{
}

Calculator_subtraction_Request::~Calculator_subtraction_Request()
{
}

Calculator_subtraction_Request::Calculator_subtraction_Request(const Calculator_subtraction_Request &x)
: m_header(x.m_header), m_subtraction(x.m_subtraction)
{
}

Calculator_subtraction_Request::Calculator_subtraction_Request(Calculator_subtraction_Request &&x)
: m_header(std::move(x.m_header)), m_subtraction(std::move(x.m_subtraction))
{
}

Calculator_subtraction_Request& Calculator_subtraction_Request::operator=(const Calculator_subtraction_Request &x)
{
    m_header = x.m_header;
    m_subtraction = x.m_subtraction;

    return *this;
}

Calculator_subtraction_Request& Calculator_subtraction_Request::operator=(Calculator_subtraction_Request &&x)
{
    m_header = std::move(x.m_header);
    m_subtraction = std::move(x.m_subtraction);

    return *this;
}

Calculator_subtraction_Out::Calculator_subtraction_Out()
: 
m_return_(0)

{
}

Calculator_subtraction_Out::~Calculator_subtraction_Out()
{
}

Calculator_subtraction_Out::Calculator_subtraction_Out(const Calculator_subtraction_Out &x)
: m_return_(x.m_return_)
{
}

Calculator_subtraction_Out::Calculator_subtraction_Out(Calculator_subtraction_Out &&x)
: m_return_(std::move(x.m_return_))
{
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator=(const Calculator_subtraction_Out &x)
{
    m_return_ = x.m_return_;;
    return *this;
}

Calculator_subtraction_Out& Calculator_subtraction_Out::operator=(Calculator_subtraction_Out &&x)
{
    m_return_ = x.m_return_;;
    return *this;
}

Calculator_subtraction_Result::Calculator_subtraction_Result() : m__d(2)
{
}

Calculator_subtraction_Result::~Calculator_subtraction_Result()
{
}

Calculator_subtraction_Result::Calculator_subtraction_Result(const Calculator_subtraction_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
    }
}

Calculator_subtraction_Result::Calculator_subtraction_Result(Calculator_subtraction_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
    }
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator=(const Calculator_subtraction_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
    }

    return *this;
}

Calculator_subtraction_Result& Calculator_subtraction_Result::operator=(Calculator_subtraction_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
    }

    return *this;
}

void Calculator_subtraction_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t Calculator_subtraction_Result::_d() const
{
    return m__d;
}

int32_t& Calculator_subtraction_Result::_d()
{
    return m__d;
}

void Calculator_subtraction_Result::unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx)
{
    m_unknownEx = _unknownEx;
    m__d = 2;
}

eprosima::rpc::protocol::dds::rpc::UnknownException Calculator_subtraction_Result::unknownEx() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
}

eprosima::rpc::protocol::dds::rpc::UnknownException& Calculator_subtraction_Result::unknownEx()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
}

void Calculator_subtraction_Result::result(const Calculator_subtraction_Out &_result)
{
    m_result = _result;
    m__d = 0;
}

void Calculator_subtraction_Result::result(Calculator_subtraction_Out &&_result)
{
    m_result = std::move(_result);
    m__d = 0;
}

const Calculator_subtraction_Out& Calculator_subtraction_Result::result() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
}

Calculator_subtraction_Out& Calculator_subtraction_Result::result()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
}


Calculator_subtraction_Reply::Calculator_subtraction_Reply()
{
}

Calculator_subtraction_Reply::~Calculator_subtraction_Reply()
{
}

Calculator_subtraction_Reply::Calculator_subtraction_Reply(const Calculator_subtraction_Reply &x)
: m_header(x.m_header), m_subtraction(x.m_subtraction)
{
}

Calculator_subtraction_Reply::Calculator_subtraction_Reply(Calculator_subtraction_Reply &&x)
: m_header(std::move(x.m_header)), m_subtraction(std::move(x.m_subtraction))
{
}

Calculator_subtraction_Reply& Calculator_subtraction_Reply::operator=(const Calculator_subtraction_Reply &x)
{
    m_header = x.m_header;
    m_subtraction = x.m_subtraction;

    return *this;
}

Calculator_subtraction_Reply& Calculator_subtraction_Reply::operator=(Calculator_subtraction_Reply &&x)
{
    m_header = std::move(x.m_header);
    m_subtraction = std::move(x.m_subtraction);

    return *this;
}



