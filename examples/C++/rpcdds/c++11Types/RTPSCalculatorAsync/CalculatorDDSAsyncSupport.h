// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CalculatorAsyncSupport.h
 * This header file contains functionality to use asynchronous calls for all interfaces.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Calculator_DDS_ASYNC_SUPPORT_H_
#define _Calculator_DDS_ASYNC_SUPPORT_H_

#include <rpcdds/transports/dds/RTPSAsyncTask.h>
#include <rpcdds/exceptions/UserException.h>
#include "CalculatorAsyncCallbackHandlers.h"
#include "CalculatorTopics.h"
/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure Calculator::addition from the server in an asynchronous call.
 * @ingroup Calculator
 */
class Calculator_additionTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        Calculator_additionTask(Calculator_additionCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~Calculator_additionTask();

        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();

        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);

        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        Calculator_additionCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();

        private:

        Calculator_additionCallbackHandler &m_obj;

        Calculator_addition_Reply m_reply;
};

/*!
 * @brief This class represents a asynchronous task created to wait the reply of the procedure Calculator::subtraction from the server in an asynchronous call.
 * @ingroup Calculator
 */
class Calculator_subtractionTask : public eprosima::rpc::transport::dds::RTPSAsyncTask
{
    public:

        /**
         * \brief The default constructor.
         *
         * \param obj Object that implements the callbacks that FastRPC will call when
         *            the reply will be received or and exception will be launched.
         * \param client Pointer to the server's proxy. Cannot be NULL.
         */
        Calculator_subtractionTask(Calculator_subtractionCallbackHandler &obj);

        //! @brief Destructor.
        virtual ~Calculator_subtractionTask();

        /*!
         * @brief This funcion is called when the reply sample is received.
         */
        virtual void execute();

        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex);

        /*!
         * @brief This function returns the object used by the task.
         *
         * @return The object that implements the callbacks.
         */
        Calculator_subtractionCallbackHandler& getObject();

        /*!
         * @brief This function returns the allocated reply sample.
         * @return Pointer to the allocated reply sample.
         */
        virtual void* getReplyInstance();

        private:

        Calculator_subtractionCallbackHandler &m_obj;

        Calculator_subtraction_Reply m_reply;
};




#endif // _Calculator_DDS_ASYNC_SUPPORT_H_