// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CalculatorTopics.h
 * This header file contains the declaration of topics generated using operations in the IDL file.
 *
 * This file was generated by the tool rpcddsgen.
 */

#ifndef _Calculator_TOPICS_H_
#define _Calculator_TOPICS_H_

#include "Calculator.h"
#include <rpcdds/protocols/dds/MessageHeader.h>
#include <rpcdds/utils/Messages.h>

#include <cstddef>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

/*!
 * @brief This class represents the structure Calculator_addition_In that can be used to send/receive requests
 * for the operation Calculator::addition.
 * @ingroup Calculator
 */
class Calculator_addition_In
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_addition_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_addition_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    user_cpp_DllExport Calculator_addition_In(const Calculator_addition_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_In that will be copied.
     */
    user_cpp_DllExport Calculator_addition_In(Calculator_addition_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_In& operator=(const Calculator_addition_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_In& operator=(Calculator_addition_In &&x);

    /*!
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    inline user_cpp_DllExport void value1(int32_t _value1)
    {
        m_value1 = _value1;
    }

    /*!
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    inline user_cpp_DllExport int32_t value1() const
    {
        return m_value1;
    }

    /*!
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    inline user_cpp_DllExport int32_t& value1()
    {
        return m_value1;
    }


    /*!
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    inline user_cpp_DllExport void value2(int32_t _value2)
    {
        m_value2 = _value2;
    }

    /*!
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    inline user_cpp_DllExport int32_t value2() const
    {
        return m_value2;
    }

    /*!
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    inline user_cpp_DllExport int32_t& value2()
    {
        return m_value2;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_addition_In& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_value1;
    int32_t m_value2;
};

/*!
 * @brief This class represents the structure Calculator_addition_Request that can be used to send/receive requests
 * for the operation Calculator::addition.
 * @ingroup Calculator
 */
class Calculator_addition_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_addition_Request();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_addition_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Request that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Request(const Calculator_addition_Request &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Request that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Request(Calculator_addition_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Request& operator=(const Calculator_addition_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Request& operator=(Calculator_addition_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    inline user_cpp_DllExport void addition(const Calculator_addition_In &_addition)
    {
        m_addition = _addition;
    }

    /*!
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    inline user_cpp_DllExport void addition(Calculator_addition_In &&_addition)
    {
        m_addition = std::move(_addition);
    }

    /*!
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     */
    inline user_cpp_DllExport const Calculator_addition_In& addition() const
    {
        return m_addition;
    }

    /*!
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     */
    inline user_cpp_DllExport Calculator_addition_In& addition()
    {
        return m_addition;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_addition_Request& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    Calculator_addition_In m_addition;
};

/*!
 * @brief This class encapsulates output paramaters for operation Calculator::addition.
 * @ingroup Calculator
 */
class Calculator_addition_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_addition_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_addition_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Out(const Calculator_addition_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Out that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Out(Calculator_addition_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Out& operator=(const Calculator_addition_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Out& operator=(Calculator_addition_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(int32_t _return_)
    {
        m_return_ = _return_;
    }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport int32_t return_() const
    {
        return m_return_;
    }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport int32_t& return_()
    {
        return m_return_;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_addition_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_return_;
};

/*!
 * @brief This class represents the structure Calculator_addition_Result that can be used to send/receive replies
 * for the operation Calculator::addition.
 *
 * @ingroup Calculator
 */
class Calculator_addition_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_addition_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_addition_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Result(const Calculator_addition_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Result that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Result(Calculator_addition_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Result& operator=(const Calculator_addition_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Result& operator=(Calculator_addition_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_addition_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_addition_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_addition_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_addition_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_addition_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_addition_Out m_result;

};

/*!
 * @brief This class represents the structure Calculator_addition_Reply that can be used to send/receive replies
 * for the operation Calculator::addition.
 * @ingroup Calculator
 */
class Calculator_addition_Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_addition_Reply();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_addition_Reply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_addition_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Reply(const Calculator_addition_Reply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_addition_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Reply(Calculator_addition_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Reply& operator=(const Calculator_addition_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_addition that will be copied.
     */
    user_cpp_DllExport Calculator_addition_Reply& operator=(Calculator_addition_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This function copies the value in member addition
     * @param _addition New value to be copied in member addition
     */
    inline user_cpp_DllExport void addition(const Calculator_addition_Result &_addition)
    {
        m_addition = _addition;
    }

    /*!
     * @brief This function moves the value in member addition
     * @param _addition New value to be moved in member addition
     */
    inline user_cpp_DllExport void addition(Calculator_addition_Result &&_addition)
    {
        m_addition = std::move(_addition);
    }

    /*!
     * @brief This function returns a constant reference to member addition
     * @return Constant reference to member addition
     */
    inline user_cpp_DllExport const Calculator_addition_Result& addition() const
    {
        return m_addition;
    }

    /*!
     * @brief This function returns a reference to member addition
     * @return Reference to member addition
     */
    inline user_cpp_DllExport Calculator_addition_Result& addition()
    {
        return m_addition;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_addition_Reply& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    Calculator_addition_Result m_addition;
};

/*!
 * @brief This class represents the structure Calculator_subtraction_In that can be used to send/receive requests
 * for the operation Calculator::subtraction.
 * @ingroup Calculator
 */
class Calculator_subtraction_In
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_subtraction_In();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_subtraction_In();

    /*
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_In(const Calculator_subtraction_In &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_In that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_In(Calculator_subtraction_In &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_In& operator=(const Calculator_subtraction_In &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_In& operator=(Calculator_subtraction_In &&x);

    /*!
     * @brief This function sets a value in member value1
     * @param _value1 New value for member value1
     */
    inline user_cpp_DllExport void value1(int32_t _value1)
    {
        m_value1 = _value1;
    }

    /*!
     * @brief This function returns the value of member value1
     * @return Value of member value1
     */
    inline user_cpp_DllExport int32_t value1() const
    {
        return m_value1;
    }

    /*!
     * @brief This function returns a reference to member value1
     * @return Reference to member value1
     */
    inline user_cpp_DllExport int32_t& value1()
    {
        return m_value1;
    }


    /*!
     * @brief This function sets a value in member value2
     * @param _value2 New value for member value2
     */
    inline user_cpp_DllExport void value2(int32_t _value2)
    {
        m_value2 = _value2;
    }

    /*!
     * @brief This function returns the value of member value2
     * @return Value of member value2
     */
    inline user_cpp_DllExport int32_t value2() const
    {
        return m_value2;
    }

    /*!
     * @brief This function returns a reference to member value2
     * @return Reference to member value2
     */
    inline user_cpp_DllExport int32_t& value2()
    {
        return m_value2;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_subtraction_In& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_value1;
    int32_t m_value2;
};

/*!
 * @brief This class represents the structure Calculator_subtraction_Request that can be used to send/receive requests
 * for the operation Calculator::subtraction.
 * @ingroup Calculator
 */
class Calculator_subtraction_Request
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_subtraction_Request();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_subtraction_Request();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Request that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Request(const Calculator_subtraction_Request &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Request that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Request(Calculator_subtraction_Request &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Request& operator=(const Calculator_subtraction_Request &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Request& operator=(Calculator_subtraction_Request &&x);

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::RequestHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the request header information.
     * @param _header Request header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::RequestHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::RequestHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the request header information.
     * @return Request header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::RequestHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    inline user_cpp_DllExport void subtraction(const Calculator_subtraction_In &_subtraction)
    {
        m_subtraction = _subtraction;
    }

    /*!
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    inline user_cpp_DllExport void subtraction(Calculator_subtraction_In &&_subtraction)
    {
        m_subtraction = std::move(_subtraction);
    }

    /*!
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     */
    inline user_cpp_DllExport const Calculator_subtraction_In& subtraction() const
    {
        return m_subtraction;
    }

    /*!
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     */
    inline user_cpp_DllExport Calculator_subtraction_In& subtraction()
    {
        return m_subtraction;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_subtraction_Request& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::RequestHeader m_header;

    Calculator_subtraction_In m_subtraction;
};

/*!
 * @brief This class encapsulates output paramaters for operation Calculator::subtraction.
 * @ingroup Calculator
 */
class Calculator_subtraction_Out
{
public:
    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_subtraction_Out();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_subtraction_Out();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Out(const Calculator_subtraction_Out &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Out that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Out(Calculator_subtraction_Out &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Out& operator=(const Calculator_subtraction_Out &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Out& operator=(Calculator_subtraction_Out &&x);

    /*!
     * @brief This function sets a value in member return_
     * @param _return_ New value for member return_
     */
    inline user_cpp_DllExport void return_(int32_t _return_)
    {
        m_return_ = _return_;
    }

    /*!
     * @brief This function returns the value of member return_
     * @return Value of member return_
     */
    inline user_cpp_DllExport int32_t return_() const
    {
        return m_return_;
    }

    /*!
     * @brief This function returns a reference to member return_
     * @return Reference to member return_
     */
    inline user_cpp_DllExport int32_t& return_()
    {
        return m_return_;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_subtraction_Out& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m_return_;
};

/*!
 * @brief This class represents the structure Calculator_subtraction_Result that can be used to send/receive replies
 * for the operation Calculator::subtraction.
 *
 * @ingroup Calculator
 */
class Calculator_subtraction_Result
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_subtraction_Result();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_subtraction_Result();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Result(const Calculator_subtraction_Result &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Result that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Result(Calculator_subtraction_Result &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Result& operator=(const Calculator_subtraction_Result &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Result& operator=(Calculator_subtraction_Result &&x);

    /*!
     * @brief This function sets the discriminator value.
     * @param __d New value for the discriminator.
     * @exception eprosima::rpc::exception::BadParamException This exception is thrown if the new value doesn't correspond to the selected union member.
     */
    user_cpp_DllExport void _d(int32_t __d);

    /*!
     * @brief This function returns the value of the discriminator.
     * @return Value of the discriminator
     */
    user_cpp_DllExport int32_t _d() const;

    /*!
     * @brief This function returns a reference to the discriminator.
     * @return Reference to the discriminator.
     */
    user_cpp_DllExport int32_t& _d();

    user_cpp_DllExport void unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx);

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException unknownEx() const;

    user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::UnknownException& unknownEx();

    /*!
     * @brief This function copies the value in member result
     * @param _result New value to be copied in member result
     */
    user_cpp_DllExport void result(const Calculator_subtraction_Out &_result);

    /*!
     * @brief This function moves the value in member result
     * @param _result New value to be moved in member result
     */
    user_cpp_DllExport void result(Calculator_subtraction_Out &&_result);

    /*!
     * @brief This function returns a constant reference to member result
     * @return Constant reference to member result
     * @exception eprosima::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport const Calculator_subtraction_Out& result() const;

    /*!
     * @brief This function returns a reference to member result
     * @return Reference to member result
     * @exception eprosima::BadParamException This exception is thrown if the requested union member is not the current selection.
     */
    user_cpp_DllExport Calculator_subtraction_Out& result();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_subtraction_Result& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    int32_t m__d;

    eprosima::rpc::protocol::dds::rpc::UnknownException m_unknownEx;

    Calculator_subtraction_Out m_result;

};

/*!
 * @brief This class represents the structure Calculator_subtraction_Reply that can be used to send/receive replies
 * for the operation Calculator::subtraction.
 * @ingroup Calculator
 */
class Calculator_subtraction_Reply
{
public:

    /*!
     * @brief Default constructor.
     */
    user_cpp_DllExport Calculator_subtraction_Reply();

    /*!
     * @brief Destructor.
     */
    user_cpp_DllExport ~Calculator_subtraction_Reply();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Calculator_subtraction_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Reply(const Calculator_subtraction_Reply &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Calculator_subtraction_Reply that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Reply(Calculator_subtraction_Reply &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Reply& operator=(const Calculator_subtraction_Reply &x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Calculator_subtraction that will be copied.
     */
    user_cpp_DllExport Calculator_subtraction_Reply& operator=(Calculator_subtraction_Reply &&x);

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(const eprosima::rpc::protocol::dds::rpc::ReplyHeader &_header)
    {
        m_header = _header;
    }

    /*!
     * @brief This method sets the reply header information.
     * @param _header Reply header.
     */
    inline user_cpp_DllExport void header(eprosima::rpc::protocol::dds::rpc::ReplyHeader &&_header)
    {
        m_header = std::move(_header);
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport const eprosima::rpc::protocol::dds::rpc::ReplyHeader& header() const
    {
        return m_header;
    }

    /*!
     * @brief This method returns the reply header information.
     * @return Reply header.
     */
    inline user_cpp_DllExport eprosima::rpc::protocol::dds::rpc::ReplyHeader& header()
    {
        return m_header;
    }

    /*!
     * @brief This function copies the value in member subtraction
     * @param _subtraction New value to be copied in member subtraction
     */
    inline user_cpp_DllExport void subtraction(const Calculator_subtraction_Result &_subtraction)
    {
        m_subtraction = _subtraction;
    }

    /*!
     * @brief This function moves the value in member subtraction
     * @param _subtraction New value to be moved in member subtraction
     */
    inline user_cpp_DllExport void subtraction(Calculator_subtraction_Result &&_subtraction)
    {
        m_subtraction = std::move(_subtraction);
    }

    /*!
     * @brief This function returns a constant reference to member subtraction
     * @return Constant reference to member subtraction
     */
    inline user_cpp_DllExport const Calculator_subtraction_Result& subtraction() const
    {
        return m_subtraction;
    }

    /*!
     * @brief This function returns a reference to member subtraction
     * @return Reference to member subtraction
     */
    inline user_cpp_DllExport Calculator_subtraction_Result& subtraction()
    {
        return m_subtraction;
    }

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    user_cpp_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    user_cpp_DllExport static size_t getCdrSerializedSize(const Calculator_subtraction_Reply& data, size_t current_alignment = 0);

    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    user_cpp_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);

private:

    eprosima::rpc::protocol::dds::rpc::ReplyHeader m_header;

    Calculator_subtraction_Result m_subtraction;
};




#endif // _Calculator_TOPICS_H_