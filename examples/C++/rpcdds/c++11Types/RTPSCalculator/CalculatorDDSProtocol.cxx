/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This generated file is licensed to you under the terms described in the
 * rpcdds_LICENSE file included in this rpcdds distribution.
 *
 *************************************************************************
 *
 * @file CalculatorDDSProtocol.cxx
 * This source file contains the definition of the protocol used to create DDS messages.
 *
 * This file was generated by the tool rpcddsgen.
 */

#include "CalculatorDDSProtocol.h"
#include <rpcdds/transports/Transport.h>
#include <rpcdds/transports/dds/RTPSProxyTransport.h>
#include <rpcdds/transports/dds/components/RTPSProxyProcedureEndpoint.h>
#include "CalculatorDDSAsyncSupport.h"

#include <rpcdds/transports/dds/RTPSServerTransport.h>
#include <rpcdds/transports/dds/components/RTPSServerProcedureEndpoint.h>

#include <rpcdds/exceptions/Exceptions.h>

#include <fastrtps/Domain.h>

using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

CalculatorProtocol::CalculatorProtocol() : ::protocol::CalculatorProtocol(), m_ddsTransport(NULL)
, Calculator_addition_str("Calculator_addition")
, Calculator_addition_pe(NULL)
, Calculator_addition_se(NULL)
, Calculator_subtraction_str("Calculator_subtraction")
, Calculator_subtraction_pe(NULL)
, Calculator_subtraction_se(NULL)


{
}

CalculatorProtocol::~CalculatorProtocol()
{
}

bool CalculatorProtocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::RTPSTransport*>(&transport);

        m_ddsTransport->initialize();

        Protocol::_setTransport(transport);

        return true;
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }

    return false;
}

// TODO Si falla que elimine los creados.
bool CalculatorProtocol::activateInterface(const char* interfaceName)
{
    std::string requesttopicName, replytopicName;

    if(m_ddsTransport != NULL)
    {
        TransportBehaviour behaviour = dynamic_cast<Transport*>(m_ddsTransport)->getBehaviour();

        if(strcmp(interfaceName, "Calculator") == 0)
        {
                        eprosima::fastrtps::Domain::registerType(m_ddsTransport->getParticipant(), &Calculator_addition_requestPlugin);

                        requesttopicName = "Calculator_addition_";
                        requesttopicName += m_ddsTransport->getRemoteServiceName();
                        requesttopicName += "_Request";

                        eprosima::fastrtps::Domain::registerType(m_ddsTransport->getParticipant(), &Calculator_addition_replyPlugin);

                        replytopicName = "Calculator_addition_";
                        replytopicName += m_ddsTransport->getRemoteServiceName();
                        replytopicName += "_Reply";

                        if(behaviour == ::transport::PROXY_BEHAVIOUR)
                        {
                            Calculator_addition_pe = dynamic_cast<eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_addition_str,
                            Calculator_addition_requestPlugin.getName(),
                            requesttopicName.c_str(),
                            Calculator_addition_replyPlugin.getName(),
                            replytopicName.c_str(),
                            (::transport::dds::RTPSTransport::Create_data)CalculatorPlugin::addition_ReplyPlugin::create_data,
                            (::transport::dds::RTPSTransport::Copy_data)CalculatorPlugin::addition_ReplyPlugin::copy_data,
                            (::transport::dds::RTPSTransport::Destroy_data)CalculatorPlugin::addition_ReplyPlugin::delete_data,
                            NULL,
                            sizeof(Calculator_addition_Reply)
            ));
                        }
                        if(behaviour == ::transport::SERVER_BEHAVIOUR)
                        {
                            Calculator_addition_se = dynamic_cast<eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_addition_str,
                                            Calculator_addition_replyPlugin.getName(),
                                            replytopicName.c_str()
            ,
                            Calculator_addition_requestPlugin.getName(),
                            requesttopicName.c_str(),
                            (::transport::dds::RTPSTransport::Create_data)CalculatorPlugin::addition_RequestPlugin::create_data,
                            (::transport::dds::RTPSTransport::Copy_data)CalculatorPlugin::addition_RequestPlugin::copy_data,
                            (::transport::dds::RTPSTransport::Destroy_data)CalculatorPlugin::addition_RequestPlugin::delete_data,
                            CalculatorProtocol::Calculator_addition_serve,
                            sizeof(Calculator_addition_Request)));
                        }

                        eprosima::fastrtps::Domain::registerType(m_ddsTransport->getParticipant(), &Calculator_subtraction_requestPlugin);

                        requesttopicName = "Calculator_subtraction_";
                        requesttopicName += m_ddsTransport->getRemoteServiceName();
                        requesttopicName += "_Request";

                        eprosima::fastrtps::Domain::registerType(m_ddsTransport->getParticipant(), &Calculator_subtraction_replyPlugin);

                        replytopicName = "Calculator_subtraction_";
                        replytopicName += m_ddsTransport->getRemoteServiceName();
                        replytopicName += "_Reply";

                        if(behaviour == ::transport::PROXY_BEHAVIOUR)
                        {
                            Calculator_subtraction_pe = dynamic_cast<eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_subtraction_str,
                            Calculator_subtraction_requestPlugin.getName(),
                            requesttopicName.c_str(),
                            Calculator_subtraction_replyPlugin.getName(),
                            replytopicName.c_str(),
                            (::transport::dds::RTPSTransport::Create_data)CalculatorPlugin::subtraction_ReplyPlugin::create_data,
                            (::transport::dds::RTPSTransport::Copy_data)CalculatorPlugin::subtraction_ReplyPlugin::copy_data,
                            (::transport::dds::RTPSTransport::Destroy_data)CalculatorPlugin::subtraction_ReplyPlugin::delete_data,
                            NULL,
                            sizeof(Calculator_subtraction_Reply)
            ));
                        }
                        if(behaviour == ::transport::SERVER_BEHAVIOUR)
                        {
                            Calculator_subtraction_se = dynamic_cast<eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint(Calculator_subtraction_str,
                                            Calculator_subtraction_replyPlugin.getName(),
                                            replytopicName.c_str()
            ,
                            Calculator_subtraction_requestPlugin.getName(),
                            requesttopicName.c_str(),
                            (::transport::dds::RTPSTransport::Create_data)CalculatorPlugin::subtraction_RequestPlugin::create_data,
                            (::transport::dds::RTPSTransport::Copy_data)CalculatorPlugin::subtraction_RequestPlugin::copy_data,
                            (::transport::dds::RTPSTransport::Destroy_data)CalculatorPlugin::subtraction_RequestPlugin::delete_data,
                            CalculatorProtocol::Calculator_subtraction_serve,
                            sizeof(Calculator_subtraction_Request)));
                        }

        }

        return true;
    }
    else
    {
      // TODO Trace.
    }

    return false;
}

int32_t
 CalculatorProtocol::Calculator_addition(/*in*/ 
int32_t
 value1, /*in*/ 
int32_t
 value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    int32_t  return_ = 0;

    Calculator_addition_Request instance;
    Calculator_addition_Reply retInstance;


    instance.addition().value1(value1);


    instance.addition().value2(value2);


    retcode = Calculator_addition_pe->send(&instance, &retInstance);

    if(retcode == OK)
    {
        if(retInstance.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK)
        {
            switch (retInstance.addition()._d())
            {
                case 0:
                    return_ = retInstance.addition().result().return_();

                    break;
                default:
                    throw ClientInternalException("Error extracting information from server");
            }
        }
        else
            retcode = SERVER_INTERNAL_ERROR;
    }

    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException("");
            break;
        default:
            break;
    };


    return return_;
}

void CalculatorProtocol::Calculator_addition_async(Calculator_additionCallbackHandler &obj, /*in*/ 
int32_t
 value1, /*in*/ 
int32_t
 value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    Calculator_addition_Request instance;
    Calculator_additionTask *task = new Calculator_additionTask(obj);

    instance.addition().value1(value1);


    instance.addition().value2(value2);


    retcode = Calculator_addition_pe->send_async(&instance, task);

    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}


void CalculatorProtocol::Calculator_addition_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *_data , eprosima::rpc::transport::Endpoint*)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    Calculator_addition_Request &requestData = *(Calculator_addition_Request*)_data;
    int32_t  value1 = 0;


    int32_t  value2 = 0;

    int32_t  return_ = 0;

    Calculator_addition_Reply replyData;
    replyData.header().relatedRequestId(requestData.header().requestId());
    replyData.header().remoteEx(eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK);


    value1 = requestData.addition().value1();


    value2 = requestData.addition().value2();


    try
    {
        if(_protocol._Calculator_impl != NULL)
        {
            return_ = _protocol._Calculator_impl->addition(value1, value2);

            replyData.addition()._d() = 0;

            replyData.addition().result().return_(return_);


            _protocol.Calculator_addition_se->sendReply(&replyData);
        }
        // TODO Send exception.
    }
    catch(const ServerInternalException &)
    {
        //TODO Quitar el unsetReply
        //
        replyData.header().remoteEx(eprosima::rpc::protocol::dds::rpc::REMOTE_EX_UNSUPPORTED);

        _protocol.Calculator_addition_se->sendReply(&replyData);
    }


}

int32_t
 CalculatorProtocol::Calculator_subtraction(/*in*/ 
int32_t
 value1, /*in*/ 
int32_t
 value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    int32_t  return_ = 0;

    Calculator_subtraction_Request instance;
    Calculator_subtraction_Reply retInstance;


    instance.subtraction().value1(value1);


    instance.subtraction().value2(value2);


    retcode = Calculator_subtraction_pe->send(&instance, &retInstance);

    if(retcode == OK)
    {
        if(retInstance.header().remoteEx() == eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK)
        {
            switch (retInstance.subtraction()._d())
            {
                case 0:
                    return_ = retInstance.subtraction().result().return_();

                    break;
                default:
                    throw ClientInternalException("Error extracting information from server");
            }
        }
        else
            retcode = SERVER_INTERNAL_ERROR;
    }

    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        case TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException("");
            break;
        default:
            break;
    };


    return return_;
}

void CalculatorProtocol::Calculator_subtraction_async(Calculator_subtractionCallbackHandler &obj, /*in*/ 
int32_t
 value1, /*in*/ 
int32_t
 value2)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    Calculator_subtraction_Request instance;
    Calculator_subtractionTask *task = new Calculator_subtractionTask(obj);

    instance.subtraction().value1(value1);


    instance.subtraction().value2(value2);


    retcode = Calculator_subtraction_pe->send_async(&instance, task);

    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}


void CalculatorProtocol::Calculator_subtraction_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *_data , eprosima::rpc::transport::Endpoint*)
{
    CalculatorProtocol &_protocol = dynamic_cast<CalculatorProtocol&>(protocol);
    Calculator_subtraction_Request &requestData = *(Calculator_subtraction_Request*)_data;
    int32_t  value1 = 0;


    int32_t  value2 = 0;

    int32_t  return_ = 0;

    Calculator_subtraction_Reply replyData;
    replyData.header().relatedRequestId(requestData.header().requestId());
    replyData.header().remoteEx(eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK);


    value1 = requestData.subtraction().value1();


    value2 = requestData.subtraction().value2();


    try
    {
        if(_protocol._Calculator_impl != NULL)
        {
            return_ = _protocol._Calculator_impl->subtraction(value1, value2);

            replyData.subtraction()._d() = 0;

            replyData.subtraction().result().return_(return_);


            _protocol.Calculator_subtraction_se->sendReply(&replyData);
        }
        // TODO Send exception.
    }
    catch(const ServerInternalException &)
    {
        //TODO Quitar el unsetReply
        //
        replyData.header().remoteEx(eprosima::rpc::protocol::dds::rpc::REMOTE_EX_UNSUPPORTED);

        _protocol.Calculator_subtraction_se->sendReply(&replyData);
    }


}


