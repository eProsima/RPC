group RESTClientExample;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "ClientExample.cxx"], description=["This source file shows a simple example of how to create a proxy for an interface."])$

#include "$ctx.filename$Proxy.h"
#include "$ctx.filename$.h"
#include "$ctx.filename$RESTProtocol.h"
#include <$ctx.includePrefix$transports/HttpProxyTransport.h>
#include <$ctx.includePrefix$exceptions/Exceptions.h>

#include <iostream>

using namespace eprosima::rpc;
using namespace eprosima::rpc::exception;
using namespace eprosima::rpc::transport;
using namespace eprosima::rpc::protocol::rest;

int main(int argc, char **argv)
{
    $ctx.filename$Protocol *protocol = NULL;
    ProxyTransport *transport = NULL;
    $first(ctx.scopedInterfaces).scopedname$Proxy *proxy = NULL;

    // Creation of the proxy for interface "$first(ctx.scopedInterfaces).scopedname$".
    try
    {
        protocol = new $ctx.filename$Protocol();
        transport = new HttpProxyTransport("127.0.0.1:8080");
        proxy = new $first(ctx.scopedInterfaces).scopedname$Proxy(*transport, *protocol);
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    $if(first(first(ctx.scopedInterfaces).operations).parameters)$
    // Create and initialize parameters.
    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $varDecl(variable=param)$};separator="\n"$
    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $if(!param.typecode.primitive)$$varComplexInitialize(variable=param)$$\n$$endif$}$
    $endif$
    $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    // Create and initialize return value.
    $varDecl(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $if(!first(first(ctx.scopedInterfaces).operations).rettypeparam.typecode.primitive)$
    $varComplexInitialize(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $endif$
    $endif$

    // Call to remote procedure "$first(first(ctx.scopedInterfaces).operations).name$".
    try
    {
        $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$        $first(first(ctx.scopedInterfaces).operations).rettypeparam.name$ = $else$        $endif$proxy->$first(first(ctx.scopedInterfaces).operations).name$($extractParams(params=first(first(ctx.scopedInterfaces).operations).parameters)$);
    }
    $if(first(first(ctx.scopedInterfaces).operations).exceptions)$
    catch(UserException &ex)
    {
        std::cout << "User exception" << std::endl;
    }
    $endif$
    catch(SystemException &ex)
    {
        std::cout << ex.what() << std::endl;
    }
    $if(first(first(ctx.scopedInterfaces).operations).parameters)$

    $first(first(ctx.scopedInterfaces).operations).parameters : {param | $varDel(variable=param)$}; separator="\n"$
    $endif$
    $if(first(first(ctx.scopedInterfaces).operations).rettypeparam)$

    $varDel(variable=first(first(ctx.scopedInterfaces).operations).rettypeparam)$
    $endif$

    delete(proxy);
    delete(transport);
    delete(protocol);

    return 0;
}

$definitions; separator="\n"$
>>
