group CDRProtocolHeader;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "CDRProtocol.h"], description=["This header file contains the declaration of the protocol used to create CDR messages."])$

#ifndef _$ctx.filename;format="toUpper"$_CDR_PROTOCOL_H_
#define _$ctx.filename;format="toUpper"$_CDR_PROTOCOL_H_

#include "$ctx.filename$Protocol.h"
#include <fastcdr/FastCdr.h>
$ctx.includeDependencies : { include |#include "$include$.h"}; separator="\n"$

namespace eprosima
{
    namespace rpc
    {
        namespace transport
        {
            class ServerTransport;
        }

        namespace protocol
        {
            namespace fastcdr
            {
                $definitions; separator="\n"$

                /*!
                 * @brief
                 * @ingroup $ctx.trimfilename$
                 */
                class RPCUSERDllExport $ctx.filename$Protocol : public eprosima::rpc::protocol::$ctx.filename$Protocol
                {
                    public:

                        $ctx.filename$Protocol();

                        virtual ~$ctx.filename$Protocol();

                        virtual bool setTransport(eprosima::rpc::transport::Transport &transport);

                        bool activateInterface(const char* interfaceName);

                        static size_t worker(Protocol& protocol, void *&buffer, size_t &bufferLength, size_t &bufferSize, eprosima::rpc::transport::Endpoint *endpoint);

                        $ctx.scopedInterfaces : { interface |
                        $interface.all_operations : { operation |
                        $if(ctx.client)$
                        $paramRetType(operation.rettype)$ $interface.formatedScopedname$_$operation.name$($paramDeclarations(params=operation.parameters)$);
                        $endif$

                        }; separator="\n"$
                        }; separator="\n"$

                    private:

                        eprosima::fastcdr::FastBuffer serializeBuffer;
                        eprosima::fastcdr::FastCdr scdr;
                };
            } // namespace fastcdr
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _$ctx.filename;format="toUpper"$_CDR_PROTOCOL_H_
>>

exception(ctx, parent, exception) ::= <<
/*!
 * @brief This function serialize an exception $exception.scopedname$.
 * @param cdr eprosima::fastcdr::FastCdr object used to serialize.
 * @param x Reference to the exception that will be serialized in the buffer.
 * @exception NotEnoughMemoryException This exception is thrown trying to serialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to serialize in an invalid value.
 */
void serialize(eprosima::fastcdr::FastCdr &cdr, const $exception.scopedname$ &x);

/*!
 * @brief This function deserialize an exception $exception.scopedname$.
 * @param cdr eprosima::fastcdr::FastCdr object used to deserialize.
 * @param x Reference to the variable that will store the exception $exception.scopedname$ read from the buffer.
 * @exception NotEnoughMemoryException This exception is thrown trying to deserialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to deserialize in an invalid value.
 */
void deserialize(eprosima::fastcdr::FastCdr &cdr, $exception.scopedname$ &x);

>>

struct_type(ctx, parent, struct, extensions, member_list) ::= <<
$membered_type(ctx=ctx, mtype=struct)$
>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
$membered_type(ctx=ctx, mtype=union)$
>>

enum_type(ctx, parent, enum) ::= <<>>

/******* Utils **********/

membered_type(ctx, mtype) ::=<<
/*!
 * @brief This function serialize a type $mtype.scopedname$.
 * @param cdr eprosima::fastcdr::FastCdr object used to serialize.
 * @param x Reference to the variable that will be serialized in the buffer.
 * @exception NotEnoughMemoryException This exception is thrown trying to serialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to serialize in an invalid value.
 */
void serialize(eprosima::fastcdr::FastCdr &cdr, const $mtype.scopedname$ &x);

/*!
 * @brief This function deserialize a type $mtype.scopedname$.
 * @param cdr eprosima::fastcdr::FastCdr object used to deserialize.
 * @param x Reference to the variable that will store the $mtype.scopedname$ read from the buffer.
 * @exception NotEnoughMemoryException This exception is thrown trying to deserialize in a position that exceed the internal memory size.
 * @exception BadParamException This exception is thrown trying to deserialize in an invalid value.
 */
void deserialize(eprosima::fastcdr::FastCdr &cdr, $mtype.scopedname$ &x);

>>
