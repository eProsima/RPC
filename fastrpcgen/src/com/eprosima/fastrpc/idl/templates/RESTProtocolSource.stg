group RESTProtocolSource;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "RESTProtocol.cxx"], description=["This source file contains the definition of the protocol used to create REST messages."])$

#include "$ctx.filename$RESTProtocol.h"
#include <$ctx.includePrefix$exceptions/Exceptions.h>
#include <$ctx.includePrefix$transports/ProxyTransport.h>
#include <$ctx.includePrefix$transports/ServerTransport.h>
#include <$ctx.includePrefix$protocols/rest/RESTSerializer.h>

using namespace eprosima::rpc;
using namespace ::protocol::rest;
using namespace ::transport;
using namespace eprosima::rpc::exception;

#include <sstream>

using namespace std;

$definitions; separator="\n"$

>>

module(ctx, parent, module, definition_list) ::= <<
$ctx.filename$Protocol::$ctx.filename$Protocol() {}

$ctx.filename$Protocol::~$ctx.filename$Protocol() {}

bool $ctx.filename$Protocol::isNumeric(string&& myString) {
    stringstream ss(myString);
    float f;
    ss \>> noskipws \>> f;

    return ss.eof() && !ss.fail();
}

bool $ctx.filename$Protocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "HTTP") != 0)
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }

    if(transport.getBehaviour() == SERVER_BEHAVIOUR)
    {
        // If this is a server transport, we set its callback
        eprosima::rpc::transport::ServerTransport &serverTransport = dynamic_cast<eprosima::rpc::transport::ServerTransport&>(transport);
        serverTransport.setCallback(&$ctx.filename$Protocol::worker);
    }

    _setTransport(transport);

    return true;
}

bool $ctx.filename$Protocol::activateInterface(const char* interfaceName)
{
    return true;
}

int $ctx.filename$Protocol::deserializeContentLength(char* buffer) {
    char contentLength[16];
    strcpy(contentLength, "Content-Length:");
    char *p = strtok(buffer, "\r\n");
    while(p) {
        p[strlen(p)] = '\r'; // strtok puts a '\0', we don't want it
        if(memcmp(p, contentLength, 15) == 0) {
            return atoi(p+15); // 15 = "Content-Length:"
        }
        p = strtok(NULL, "\r\n");
    }

    return 0;
}

size_t $ctx.filename$Protocol::worker(Protocol& protocol, void *&buffer, size_t &bufferLength, size_t &bufferSize, eprosima::rpc::transport::Endpoint *endpoint)
{
    // TODO : Call the protocol
    eprosima::rpc::protocol::rest::$ctx.filename$Protocol &restProtocol = dynamic_cast<eprosima::rpc::protocol::rest::$ctx.filename$Protocol&>( protocol );
    HttpMessage *httpMessage = reinterpret_cast<HttpMessage*>(buffer);

    HttpMessage response = restProtocol.processRequest(*httpMessage);

    dynamic_cast<ServerTransport&>(restProtocol.getTransport()).sendReply(&response, 0, endpoint);

    return 1;
}

// Server
HttpMessage $ctx.filename$Protocol::processRequest(HttpMessage &httpMessage)
{
    RESTSerializer restSerializer;

    restSerializer.deserializeUri(httpMessage.getUri(), "$module.resourceBaseUri$");

    // TODO Siempre se crea aunque no haya un error. Cambiar
    HttpMessage http404Response;
    http404Response.setResponseCode(404);
    http404Response.setResponseStatus("Resource not found");

    $ctx.deserializeCode$

    return http404Response;
}

$definition_list$

>>

exception(ctx, parent, exception) ::= <<
void $exception.name$Utils::setTypeData(const $exception.name$ &ex, $exception.name$_t &instance)
{
    $exception.members : { member |instance.$member.name$ = ex.$member.name$;}; separator="\n"$
}

void $exception.name$Utils::extractTypeData($exception.name$ &ex, $exception.name$_t &data)
{
    $exception.members : { member |ex.$member.name$ = data.$member.name$$if(member.typecode.isType_d)$$stringPointer()$$endif$;}; separator="\n"$
}

>>

operation(ctx, parent, operation, param_list) ::= <<
$if(operation.parent.pathHasBrackets)$
string $ctx.filename$Protocol::expandPath_$operation.name$(string &&path, $paramRetType(typecode=first(operation.parameters).typecode)$ $first(operation.parameters).name$)
{
    RESTSerializer restSerializer;
    stringstream stream;
    string expandedPath;

    restSerializer.beginSerializeTemplateParameters(std::move(path));

    $expandPathSegment(param=first(operation.parameters))$

    restSerializer.endSerializeTemplateParameters(expandedPath);

    return expandedPath;
}

$endif$
$paramRetType(operation.rettype)$ $ctx.filename$Protocol::$operation.parent.formatedScopedname$_$operation.name$($paramDeclarations(params=operation.parameters)$)
{
     stringstream stream;
     RESTSerializer restSerializer;
     eprosima::rpc::transport::ProxyTransport &proxyTransport = dynamic_cast<eprosima::rpc::transport::ProxyTransport&>( getTransport() );
     $varDecl(variable=operation.rettypeparam)$
     $varComplexInitialize(variable=operation.rettypeparam)$
     // XXX TODO if NULL -> error

     // Resource Base URI = $if(ctx.currentModule)$$ctx.currentModule.resourceBaseUri$$endif$
     // Path = $operation.parent.path$
     // Method = $operation.method$
     // Body Parameter = $operation.body$

     HttpMessage httpMessage;

     httpMessage.setMethod(HttpMessage::HTTP_METHOD_$operation.method$);
     //TODO Chequear host en el transport.
     httpMessage.setHost("$if(ctx.currentModule)$$ctx.currentModule.resourceHost$$endif$");
     std::string uri($if(operation.parent.pathHasBrackets)$expandPath_$operation.name$(std::string("$if(ctx.currentModule)$$ctx.currentModule.resourceBaseUriWithoutLastBackslace$$endif$/$operation.parent.pathWithoutFirstBackslace$"), $first(operation.parameters).name$)$else$"$if(ctx.currentModule)$$ctx.currentModule.resourceBaseUriWithoutLastBackslace$$endif$/$operation.parent.pathWithoutFirstBackslace$"$endif$);

     $if(operation.parent.pathHasBrackets)$
        $serializeHTTPParams(params=rest(operation.parameters))$
     $else$
        $serializeHTTPParams(params=operation.parameters)$
     $endif$

     httpMessage.setUri(uri);

     $serializeHTTPBodyParams(params=operation.parameters)$

     // HTTP connection
     // TODO Check connection error.
     proxyTransport.connect();
     proxyTransport.send(&httpMessage, 0);
     HttpMessage httpResponse;
     size_t dump;
     proxyTransport.receive(&httpResponse, 0, dump);

     $if(operation.rettype)$

     int discriminator = 0;

     if(httpResponse.getBodyContentType().find("xml") != string::npos)
     {
        discriminator = 1;
     }
     else if(httpResponse.getBodyContentType().find("json") != string::npos)
     {
        discriminator = 2;
     }

     switch(discriminator)
     {
     $operation.rettype.members : {member | case $first(member.labels)$:
     $operation.rettypeparam.name$._d() = discriminator;
     $operation.rettypeparam.name$.$member.name$().$first(member.typecode.members).name$(httpResponse.getResponseCode());
     $if(rest(member.typecode.members))$
     $operation.rettypeparam.name$.$member.name$().$first(rest(member.typecode.members)).name$(httpResponse.getBodyData());
     $endif$
     break;
     }$
     }

     $endif$

     return $operation.rettypeparam.name$;
}

$if(operation.parent.pathHasBrackets)$
void $ctx.filename$Protocol::deserializePath_$operation.name$(RESTSerializer &restSerializer, $paramDeclsByRef(params=first(operation.parameters))$)
{
    stringstream stream;

    $deserializePathSegment(param=first(operation.parameters))$
}
$endif$

HttpMessage $ctx.filename$Protocol::deserialize_$operation.parent.name$_$operation.name$(RESTSerializer &restSerializer, HttpMessage &httpMessage)
{
    std::stringstream stream;

    $if(operation.parent.pathHasBrackets)$
    $paramRetType(typecode=first(operation.parameters).typecode)$ $first(operation.parameters).name$;
    deserializePath_$operation.name$(restSerializer, $first(operation.parameters).name$);
    $deserializeHTTPParams(params=rest(operation.parameters))$
    $else$
    $deserializeHTTPParams(params=operation.parameters)$
    $endif$

    $deserializeHTTPBodyParams(params=operation.parameters)$

    // TODO Check implementation.
    $if(operation.rettype)$$paramRetType(operation.rettype)$ $operation.rettype.name$ = $endif$_$operation.parent.formatedScopedname$_impl->$operation.name$($implCallParams(params = operation.parameters)$);

    HttpMessage httpResponse;
    $serializeServerResponse(rettype=operation.rettype)$

    return httpResponse;
}
>>

implCallParams(params) ::= <<
$if(first(params))$ $if(first(params).parent.parent.pathHasBrackets)$ $first(params).name$ $rest(params) : { param |, $param.name$$stringGet(param)$ }$ $else$ $params : { param |$param.name$$stringGet(param)$}; separator=", "$ $endif$ $endif$
>>

serializeServerResponse(rettype) ::= <<
$if(operation.rettype)$
switch($rettype.name$._d())
{
$rettype.members : {member |case $first(member.labels)$:
    httpResponse.setResponseCode($rettype.name$.$member.name$().status());
$first(rest(member.typecode.members)) : {member2 |httpResponse.setBodyData($rettype.name$.$member.name$().$member2.name$()); }$
    break;
}$
}

if(httpResponse.getBodyData().size() > 0)
{
    if($rettype.name$._d() == 1)
        httpResponse.setBodyContentType("application/xml");
    else if($rettype.name$._d() == 2)
        httpResponse.setBodyContentType("application/json");
}
$endif$
>>

deserializePathSegment(param) ::= <<
    $param.typecode.members, param.parent.parent.templateParameterPositions : {member, pos |
    // Deserialize $member.name$
    stream << restSerializer.getTag($pos$);
    stream \>> $param.name$.$member.name$();
    stream.str(std::string());
    stream.clear();

    }$
>>

expandPathSegment(param) ::= <<
    $param.typecode.members : {member |
    // Expand $member.name$
    stream << $param.name$.$member.name$();
    restSerializer.serializeTemplateParameter(stream.str());
    stream.str(std::string());
    stream.clear();
    };separator="\n"$
>>

deserializeHTTPParams(params) ::= <<
$if(params)$
$params : {param |
$if(!param.bodyParam)$
// Deserialize $param.name$
$if(param.typecode.isType_d)$
std::string $param.name$ = restSerializer.getQueryParameter("$param.name$");
$else$
$varDecl(variable=param)$
stream << restSerializer.getQueryParameter("$param.name$");
stream \>> $param.name$;
stream.str(std::string());
stream.clear();
$endif$
$endif$
}; separator="\n"$

$endif$
>>

serializeHTTPParams(params) ::= <<
$if(params)$
std::string paramValue;
$endif$
$params : {param |
$if(!param.bodyParam)$
stream << $param.name$;
paramValue = stream.str();
stream.str(std::string());
stream.clear();
restSerializer.serializeQueryParameter(uri, "$param.realname$", paramValue);
$endif$
};separator="\n"$

>>

serializeHTTPBodyParams(params) ::= <<
$params : {param |
$if(param.bodyParam)$// Serializing body parameter $param.name$
switch($param.name$._d())
{
$param.typecode.members : {member | case $first(member.labels)$:
    httpMessage.setBodyData($param.name$.$member.name$());
    break;
};separator="\n"$
}

if(!httpMessage.getBodyData().empty())
{
    if($param.name$._d() == 1)
        httpMessage.setBodyContentType("application/xml");
    else if($param.name$._d() == 2)
        httpMessage.setBodyContentType("application/json");
}
$endif$
}$

>>

deserializeHTTPBodyParams(params) ::= <<
$params : {param |
$if(param.bodyParam)$
// Deserializing body parameter $param.name$
$paramRetType(typecode=param.typecode)$ $param.name$;
std::string mediaType = httpMessage.getBodyContentType();
int discriminator = 0;
if(mediaType.find("xml") != string::npos)
    discriminator = 1;
else if(mediaType.find("json") != string::npos)
    discriminator = 2;
else {
	// Deberia haber Body Param y no esta, o esta en un formato no admitido. Error 400.
	HttpMessage http400Response;
	http400Response.setResponseCode(400);
	http400Response.setResponseStatus("Bad request");
	return http400Response;
}

switch(discriminator) {
$param.typecode.members : {member |
case $first(member.labels)$:
$param.name$.$member.name$(httpMessage.getBodyData());
break;
}; separator="\n"$
}
$endif$
}; separator="\n"$
>>


/*!
 * Extra string templates. Utils.
 */
createDataHelper(param, dataname, isRequest) ::= <<
$if(param.typecode.isType_f)$
$memberComplexExtract(member=param, dataname=dataname)$
$else$
$dataname$.$param.name$ = $if(isRequest)$$if(param.typecode.isType_d)$$charConstCasting()$$endif$$endif$$param.name$;
$endif$
>>

extractDataHelper(param, dataname, isReply) ::= <<
$if(isReply)$
$if(param.input)$
$if(param.typecode.primitive)$
$if(param.typecode.isType_d)$
if($param.name$ != NULL)
    free($param.name$);
$endif$
$else$
$varComplexDel(variable=param)$
$endif$
$endif$
$if(param.typecode.isType_f)$
$memberComplexCopy(member=param, dataname=dataname)$
$else$
$param.name$ = $dataname$.$param.name$$if(param.typecode.isType_d)$$stringPointer()$$endif$;
$endif$
$else$
$if(param.output)$
$if(param.typecode.primitive)$
$if(param.typecode.isType_d)$
$param.name$ = strdup($dataname$.$param.name$);
$else$
$param.name$ = $dataname$.$param.name$;
$endif$
$else$
$memberComplexCopy(member=param, dataname=dataname)$
$endif$
$else$
$if(param.typecode.isType_f)$
$memberComplexCopy(member=param, dataname=dataname)$
$else$
$param.name$ = $dataname$.$param.name$$if(param.typecode.isType_d)$$stringPointer()$$endif$;
$endif$
$endif$
$endif$
>>

createExceptionUtil(operation, exception) ::= <<
void $operation.parent.name$_$operation.name$_$exception.name$Utils::setTypeData(const $exception.scopedname$ &ex, $operation.parent.name$_$operation.name$_$exception.name$_t &instance)
{
    $exception.members : { member |instance.$member.name$ = ex.$member.name$;}; separator="\n"$
}

void $operation.parent.name$_$operation.name$_$exception.name$Utils::extractTypeData($exception.scopedname$ &ex, $operation.parent.name$_$operation.name$_$exception.name$_t &data)
{
    $exception.members : { member |ex.$member.name$ = data.$member.name$$if(member.typecode.isType_d)$$stringPointer()$$endif$;}; separator="\n"$
}


>>

stringGet(param) ::= <<$if(param.typecode.isType_d)$.c_str()$endif$>>
