group DDSProtocolSourceByOperation;

import "Common.stg"
import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "DDSProtocol.cxx"], description=["This source file contains the definition of the protocol used to create DDS messages."])$

$if(ctx.rtiTypes)$
//TODO Remove when only one VS project will be generated
#if defined(_WIN32) && defined(NDDS_USER_DLL_EXPORT)
class __declspec(dllimport) DDSDomainEntity;
class __declspec(dllimport) DDSEntity;
#endif
$endif$

#include "$ctx.filename$DDSProtocol.h"
#include <$ctx.includePrefix$transports/Transport.h>
$if(ctx.client)$
#include <$ctx.includePrefix$transports/dds/ProxyTransport.h>
#include <$ctx.includePrefix$transports/dds/components/ProxyProcedureEndpoint.h>
#include "$ctx.filename$DDSAsyncSupport.h"

$endif$
$if(ctx.server)$
#include <$ctx.includePrefix$transports/dds/ServerTransport.h>
#include <$ctx.includePrefix$transports/dds/components/ServerProcedureEndpoint.h>

$endif$
#include <$ctx.includePrefix$exceptions/Exceptions.h>
$if(!ctx.rtiTypes)$
#include "$ctx.filename$TopicsPlugin.h"
$else$
$ReqRepSIncludes(filename=ctx.filename)$
$endif$

using namespace eprosima::rpc;
using namespace ::protocol::dds;
using namespace ::transport;
using namespace ::exception;

$ctx.filename$Protocol::$ctx.filename$Protocol() : ::protocol::$ctx.filename$Protocol(), m_ddsTransport(NULL)
$ctx.scopedInterfaces : { interface |
$interface.all_operations : { operation |
, $interface.formatedScopedname$_$operation.name$_str("$interface.formatedScopedname$_$operation.name$")
$if(ctx.client)$
, $interface.formatedScopedname$_$operation.name$_pe(NULL)
$endif$
$if(ctx.server)$
, $interface.formatedScopedname$_$operation.name$_se(NULL)
$endif$
}$
}$
{
}

$ctx.filename$Protocol::~$ctx.filename$Protocol()
{
}

bool $ctx.filename$Protocol::setTransport(Transport &transport)
{
    if(strcmp(transport.getType(), "DDS") == 0)
    {
        m_ddsTransport = dynamic_cast<eprosima::rpc::transport::dds::Transport*>(&transport);

        m_ddsTransport->initialize();

        Protocol::_setTransport(transport);

        return true;
    }
    else
    {
        throw IncompatibleException("protocol and transport are incompatibles");
    }

    return false;
}

// TODO Si falla que elimine los creados.
bool $ctx.filename$Protocol::activateInterface(const char* interfaceName)
{
    const char *requesttypeName = NULL, *replytypeName = NULL;
    std::string requesttopicName, replytopicName;

    if(m_ddsTransport != NULL)
    {
        TransportBehaviour behaviour = dynamic_cast<Transport*>(m_ddsTransport)->getBehaviour();

        $if(first(ctx.scopedInterfaces))$
        if(strcmp(interfaceName, "$first(ctx.scopedInterfaces).scopedname$") == 0)
        {
            $first(ctx.scopedInterfaces).all_operations : { operation |
            $getTypenameOperation(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Request", varname="requesttypeName")$

            if($registerTypenameOperationAndCheck(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Request", varname="requesttypeName")$)
            {
                return false;
            }

            requesttopicName = "$first(ctx.scopedInterfaces).scopedname$_$operation.name$_";
            requesttopicName += m_ddsTransport->getRemoteServiceName();
            requesttopicName += "_Request";

            $if(!operation.oneway)$
            $getTypenameOperation(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Reply", varname="replytypeName")$

            if($registerTypenameOperationAndCheck(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Reply", varname="replytypeName")$)
            {
                return false;
            }

            replytopicName = "$first(ctx.scopedInterfaces).scopedname$_$operation.name$_";
            replytopicName += m_ddsTransport->getRemoteServiceName();
            replytopicName += "_Reply";
            $endif$

            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_pe = dynamic_cast<eprosima::rpc::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_str,
                requesttypeName,
                requesttopicName.c_str(),
                $if(!operation.oneway)$replytypeName,
                replytopicName.c_str(),
                $eprosimaTypesBool()$,
                $createDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Reply")$,
                $copyDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Reply")$,
                $destroyDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Reply")$,
                NULL,
                sizeof($first(ctx.scopedInterfaces).scopedname$_$operation.name$_Reply)
                $else$NULL, NULL, $eprosimaTypesBool()$, NULL, NULL, NULL, NULL, 0$endif$));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_se = dynamic_cast<eprosima::rpc::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_str,
                $if(operation.oneway)$NULL, NULL$else$replytypeName, replytopicName.c_str()$endif$,
                requesttypeName,
                requesttopicName.c_str(),
                $eprosimaTypesBool()$,
                $createDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Request")$,
                $copyDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Request")$,
                $destroyDataCallback(interface=first(ctx.scopedInterfaces), operation=operation, suffix="_Request")$,
                $ctx.filename$Protocol::$first(ctx.scopedInterfaces).formatedScopedname$_$operation.name$_serve,
                sizeof($first(ctx.scopedInterfaces).scopedname$_$operation.name$_Request)));
            }
            $endif$
            }; separator="\n"$
        }
        $rest(ctx.scopedInterfaces) : {interface |
        else if(strcmp(interfaceName, "$interface.scopedname$") == 0)
        {
            $interface.all_operations : { operation |
            $getTypenameOperation(interface=interface, operation=operation, suffix="_Request", varname="requesttypeName")$

            if($registerTypenameOperationAndCheck(interface=interface, operation=operation, suffix="_Request", varname="requesttypeName")$)
            {
                return false;
            }

            requesttopicName = "$interface.scopedname$_$operation.name$_";
            requesttopicName += m_ddsTransport->getRemoteServiceName();
            requesttopicName += "_Request";

            $if(!operation.oneway)$
            $getTypenameOperation(interface=interface, operation=operation, suffix="_Reply", varname="replytypeName")$

            if($registerTypenameOperationAndCheck(interface=interface, operation=operation, suffix="_Reply", varname="replytypeName")$)
            {
                return false;
            }

            replytopicName = "$interface.scopedname$_$operation.name$_";
            replytopicName += m_ddsTransport->getRemoteServiceName();
            replytopicName += "_Reply";
            $endif$

            $if(ctx.client)$
            if(behaviour == ::transport::PROXY_BEHAVIOUR)
            {
                $interface.formatedScopedname$_$operation.name$_pe = dynamic_cast<eprosima::rpc::transport::dds::ProxyProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_$operation.name$_str,
                requesttypeName,
                requesttopicName.c_str(),
                $if(!operation.oneway)$replytypeName,
                replytopicName.c_str(),
                $eprosimaTypesBool()$,
                $createDataCallback(interface=interface, operation=operation, suffix="_Reply")$,
                $copyDataCallback(interface=interface, operation=operation, suffix="_Reply")$,
                $destroyDataCallback(interface=interface, operation=operation, suffix="_Reply")$,
                NULL,
                sizeof($interface.scopedname$_$operation.name$_Reply)
                $else$NULL, NULL, $eprosimaTypesBool()$, NULL, NULL, NULL, NULL, 0$endif$));
            }
            $endif$
            $if(ctx.server)$
            if(behaviour == ::transport::SERVER_BEHAVIOUR)
            {
                $interface.formatedScopedname$_$operation.name$_se = dynamic_cast<eprosima::rpc::transport::dds::ServerProcedureEndpoint*>(m_ddsTransport->createProcedureEndpoint($interface.formatedScopedname$_$operation.name$_str,
                $if(operation.oneway)$NULL, NULL$else$replytypeName, replytopicName.c_str()$endif$,
                requesttypeName,
                requesttopicName.c_str(),
                $eprosimaTypesBool()$,
                $createDataCallback(interface=interface, operation=operation, suffix="_Request")$,
                $copyDataCallback(interface=interface, operation=operation, suffix="_Request")$,
                $destroyDataCallback(interface=interface, operation=operation, suffix="_Request")$,
                $ctx.filename$Protocol::$interface.formatedScopedname$_$operation.name$_serve,
                sizeof($interface.scopedname$_$operation.name$_Request)));
            }
            $endif$
            }; separator="\n"$
        }}; separator="\n"$

        return true;
        $endif$
    }
    else
    {
      // TODO Trace.
    }

    return false;
}

$definitions; separator="\n"$
>>

interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : { operation |
$if(ctx.client)$
$paramRetType(operation.rettype)$ $ctx.filename$Protocol::$interface.formatedScopedname$_$operation.name$($paramDeclarations(params=operation.parameters)$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $varDecl(variable=operation.rettypeparam)$
    $interface.scopedname$_$operation.name$_Request instance;
    $if(!operation.oneway)$
    $interface.scopedname$_$operation.name$_Reply retInstance;

    $varComplexInitializeT(typeName=[interface.scopedname, "_", operation.name, "_Reply"], name="retInstance")$
    $endif$

    $operation.inputparam : { param |$addParamToTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $interface.formatedScopedname$_$operation.name$_pe->send(&instance, $if(!operation.oneway)$&retInstance$else$NULL$endif$);

    $if(!operation.oneway)$
    if(retcode == OK)
    {
        if($getRemoteException(varname="retInstance")$ == $remoteExceptionOK()$)
        {
            switch ($replyOperationUnionDiscriminatorByOperation(operation=operation, varname="retInstance")$)
            {
                case 0:
                    $[operation.outputparam, operation.rettypeparam] : { param |$extractParamFromTopic(param=param, varname=replyOperationUnionDataAccessByOperation(operation=operation, varname="retInstance", dataname="result"), isReply="yes")$};separator="\n"$
                    break;
                $operation.exceptions : { exception |
                case $exception.md5$:
                    {
                    $exception.scopedname$ ex;
                    // TODO No permite arrays.
                    $if(!ctx.rtiTypes)$
                    ex = $replyOperationUnionDataByOperation(operation=operation, varname="retInstance")$.$exception.formatedScopedname$_ex();
                    $else$
                    $exception.members : { member |$extractExceptionMemberFromTopic(exception=exception, member=member, varname=replyOperationUnionDataByOperation(operation=operation, varname="retInstance"))$}; separator="\n"$
                    $endif$

                    ex.raise();
                    }
                    break;
                }; separator="\n"$
                default:
                    throw ClientInternalException("Error extracting information from server");
            }
        }
        else
            retcode = SERVER_INTERNAL_ERROR;
    }

    $endif$
    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        $if(!operation.oneway)$
        case TIMEOUT:
            throw ServerTimeoutException("Timeout waiting the server's reply");
            break;
        case SERVER_INTERNAL_ERROR:
            throw ServerInternalException("");
            break;
        $endif$
        default:
            break;
    };


    $if(operation.rettypeparam)$
    return $operation.rettypeparam.name$;
    $endif$
}
$endif$

$if(!operation.oneway)$
void $ctx.filename$Protocol::$interface.formatedScopedname$_$operation.name$_async($interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, separatorInicial=", ")$)
{
    ReturnMessage retcode = CLIENT_INTERNAL_ERROR;
    $interface.scopedname$_$operation.name$_Request instance;
    $interface.scopedname$_$operation.name$Task *task = new $interface.scopedname$_$operation.name$Task(obj);

    $operation.inputparam : { param |$addParamToTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="instance"), isRequest="yes")$};separator="\n"$

    retcode = $interface.formatedScopedname$_$operation.name$_pe->send_async(&instance, task);

    switch (retcode)
    {
        case CLIENT_INTERNAL_ERROR:
            throw ClientInternalException("Error in client side");
            break;
        case SERVER_NOT_FOUND:
            throw ServerNotFoundException("Cannot connect to the server");
            break;
        default:
            break;
    }
}

$endif$

$if(ctx.server)$
void $ctx.filename$Protocol::$interface.formatedScopedname$_$operation.name$_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *_data , eprosima::rpc::transport::Endpoint*)
{
    $ctx.filename$Protocol &_protocol = dynamic_cast<$ctx.filename$Protocol&>(protocol);
    $interface.scopedname$_$operation.name$_Request &requestData = *($interface.scopedname$_$operation.name$_Request*)_data;
    $operation.parameters : {param | $varDecl(variable=param, create=param.onlyOutput)$}; separator="\n"$
    $varDecl(variable=operation.rettypeparam, create="yes")$
    $if(!operation.oneway)$
    $interface.scopedname$_$operation.name$_Reply replyData;
    $copyHeaderInfo(reqvarname="requestData", repvarname="replyData")$
    $endif$

    $operation.inoutputparam : {param |$if(!param.typecode.primitive)$$varComplexInitialize(variable=param)$$\n$$endif$}$

    $operation.inputparam : {param | $extractParamFromTopic(param=param, varname=requestOperationDataByOperation(operation=operation, varname="requestData"))$};separator="\n"$

    try
    {
        if(_protocol._$interface.formatedScopedname$_impl != NULL)
        {
            $if(operation.rettypeparam)$$operation.rettypeparam.name$ = $endif$_protocol._$interface.formatedScopedname$_impl->$operation.name$($extractParams(params=operation.parameters)$);

            $if(!operation.oneway)$
            $replyOperationUnionDiscriminatorByOperation(operation=operation, varname="replyData")$ = 0;

            $[operation.outputparam, operation.rettypeparam] : { param |$addParamToTopic(param=param, varname=replyOperationUnionDataAccessByOperation(operation=operation, varname="replyData", dataname="result"))$};separator="\n"$

            _protocol.$interface.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
            $endif$
        }
        // TODO Send exception.
    }
    $operation.exceptions : { exception |
    catch(const $exception.scopedname$ &ex)
    {
        $if(!operation.oneway)$
        $replyOperationUnionDiscriminatorByOperation(operation=operation, varname="replyData")$ = $exception.md5$;

        $if(!ctx.rtiTypes)$
        $replyOperationUnionDataByOperation(operation=operation, varname="replyData")$.$exception.formatedScopedname$_ex(std::move(ex));
        $else$
        $exception.members : { member |$addExceptionMemberToTopic(exception=exception, member=member, varname=replyOperationUnionDataByOperation(operation=operation, varname="replyData"))$}; separator="\n"$
        $endif$

        _protocol.$interface.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
        $endif$
    }
    }; separator="\n"$
    catch(const ServerInternalException &)
    {
        $if(!operation.oneway)$
        //TODO Quitar el unsetReply
        //$unsetReply()$
        $setRemoteExceptionAsUnsupported(varname="replyData")$
        $setRemoteExceptionDefaultDiscriminatorByOperation(varname="replyData", interface=interface, operation=operation)$

        _protocol.$interface.formatedScopedname$_$operation.name$_se->sendReply(&replyData);
        $endif$
    }

    $reqrepRefFinalize(type=[interface.scopedname, "_", operation.name], reqrep="Request", name="requestData")$

    $[operation.outputparam, operation.rettypeparam] : {param | $varDel(variable=param)$}; separator="\n"$
}
$endif$
}; separator="\n"$

$export_list$
>>
