group AsyncCallbackHandlers;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "AsyncCallbackHandlers.h"], description=["This header file contains the declaration of callback handlers used in asynchronous calls."])$

#ifndef _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_
#define _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_

#include <$ctx.includePrefix$exceptions/SystemException.h>
#include <$ctx.includePrefix$exceptions/UserException.h>
#include "$ctx.filename$.h"

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_ASYNC_CALLBACK_HANDLERS_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : { operation |
$if(!operation.oneway)$
/*!
 * @brief This abstract class defines the callbacks that eProsima RPC will call in an asynchronous call.
 *        These callback has to be implemented in a derived class.
 * @ingroup $ctx.trimfilename$
 */
class $interface.name$_$operation.name$CallbackHandler
{
    public:
        /*!
         * This function is called when is received the reply from the server.
         */
        virtual void $operation.name$(
                $paramDeclarationsByValue(params=[operation.outputparam, operation.rettypeparam])$) = 0;

        /*!
         * @brief This function is called when an exception occurs.
         *        This exception can be launched in the server's side or in the client's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::SystemException &ex) = 0;
        $if(operation.exceptions)$
        /*!
         * @brief This function is called when a user exception occurs.
         *        This user exception is launched in the server's side.
         *
         * @param ex The exception that will be launched.
         */
        virtual void on_exception(const eprosima::rpc::exception::UserException &ex) = 0;
        $endif$
\};

$endif$
}; separator="\n"$

$export_list$
>>
