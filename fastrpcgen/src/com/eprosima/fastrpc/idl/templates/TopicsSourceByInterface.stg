/*************************************************************************
 * Copyright (c) 2012 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsSourceInterface;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Topics.cpp"], description=["This source file contains the implementation of topics generated using operations in the IDL file."])$

#include "$ctx.filename$Topics.h"

#include <fastcdr/Cdr.h>
#include <fastcdr/exceptions/BadParamException.h>
#include <$ctx.includePrefix$exceptions/BadParamException.h>

$definitions; separator="\n"$

>>

interface(ctx, parent, interface, export_list) ::= <<
$export_list$

$interface.all_operations : { operation |
$interface.scopedname$_$operation.name$_In::$interface.name$_$operation.name$_In()
$if(operation.inputparam)$$parameters_default_init(operation.inputparam)$
$else$: m_dummy(0)
$endif$
{
\}

$interface.scopedname$_$operation.name$_In::~$interface.name$_$operation.name$_In()
{
\}

$interface.scopedname$_$operation.name$_In::$interface.name$_$operation.name$_In(const $interface.name$_$operation.name$_In &x)
$if(operation.inputparam)$$parameters_copy_init(parameters=operation.inputparam)$
$else$: m_dummy(x.m_dummy)
$endif$
{
\}

$interface.scopedname$_$operation.name$_In::$interface.name$_$operation.name$_In($interface.name$_$operation.name$_In &&x)
$if(operation.inputparam)$$parameters_move_init(parameters=operation.inputparam)$
$else$: m_dummy(x.m_dummy)
$endif$
{
\}

$interface.scopedname$_$operation.name$_In& $interface.scopedname$_$operation.name$_In::operator=(const $interface.scopedname$_$operation.name$_In &x)
{
    $if(operation.inputparam)$
    $operation.inputparam :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$

    return *this;
\}

$interface.scopedname$_$operation.name$_In& $interface.scopedname$_$operation.name$_In::operator=($interface.scopedname$_$operation.name$_In &&x)
{
    $if(operation.inputparam)$
    $operation.inputparam :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$

    return *this;
\}

size_t $interface.scopedname$_$operation.name$_In::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $if(operation.inputparam)$
    $operation.inputparam : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
\}

size_t $interface.scopedname$_$operation.name$_In::getCdrSerializedSize(const $interface.scopedname$_$operation.name$_In& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $if(operation.inputparam)$
    $operation.inputparam : { param |$serialized_size(ctx=ctx, object=param, data="data", var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
\}

void $interface.scopedname$_$operation.name$_In::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $if(operation.inputparam)$
    $operation.inputparam : { param |$object_serialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    scdr << m_dummy;
    $endif$
\}

void $interface.scopedname$_$operation.name$_In::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $if(operation.inputparam)$
    $operation.inputparam : { param |$object_deserialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    dcdr \>> m_dummy;
    $endif$
\}

$if(!operation.oneway)$

$interface.scopedname$_$operation.name$_Out::$interface.name$_$operation.name$_Out()
$if([operation.outputparam, operation.rettypeparam])$$parameters_default_init([operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(0)
$endif$
{
\}

$interface.scopedname$_$operation.name$_Out::~$interface.name$_$operation.name$_Out()
{
\}

$interface.scopedname$_$operation.name$_Out::$interface.name$_$operation.name$_Out(const $interface.name$_$operation.name$_Out &x)
$if([operation.outputparam, operation.rettypeparam])$$parameters_copy_init(parameters=[operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(x.m_dummy)
$endif$
{
\}

$interface.scopedname$_$operation.name$_Out::$interface.name$_$operation.name$_Out($interface.name$_$operation.name$_Out &&x)
$if([operation.outputparam, operation.rettypeparam])$$parameters_move_init(parameters=[operation.outputparam, operation.rettypeparam])$
$else$: m_dummy(x.m_dummy)
$endif$
{
\}

$interface.scopedname$_$operation.name$_Out& $interface.scopedname$_$operation.name$_Out::operator=(const $interface.scopedname$_$operation.name$_Out &x)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_copy_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$

    return *this;
\}

$interface.scopedname$_$operation.name$_Out& $interface.scopedname$_$operation.name$_Out::operator=($interface.scopedname$_$operation.name$_Out &&x)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] :{ param |$parameters_move_assigment(param)$;}; separator="\n"$
    $else$
    m_dummy = x.m_dummy;
    $endif$

    return *this;
\}

size_t $interface.scopedname$_$operation.name$_Out::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$max_serialized_size(ctx=ctx, typecode=param.typecode, var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
\}

size_t $interface.scopedname$_$operation.name$_Out::getCdrSerializedSize(const $interface.scopedname$_$operation.name$_Out& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$serialized_size(ctx=ctx, object=param, data="data", var="current_alignment")$}; separator="\n"$
    $else$
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    $endif$

    return current_alignment - initial_alignment;
\}

void $interface.scopedname$_$operation.name$_Out::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$object_serialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    scdr << m_dummy;
    $endif$
\}

void $interface.scopedname$_$operation.name$_Out::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    $if([operation.outputparam, operation.rettypeparam])$
    $[operation.outputparam, operation.rettypeparam] : { param |$object_deserialization(ctx=ctx, object=param, preffix="m_")$}; separator="\n"$
    $else$
    dcdr \>> m_dummy;
    $endif$
\}

$interface.scopedname$_$operation.name$_Result::$interface.name$_$operation.name$_Result() : m__d(2)
{
\}

$interface.scopedname$_$operation.name$_Result::~$interface.name$_$operation.name$_Result()
{
\}

$interface.scopedname$_$operation.name$_Result::$interface.name$_$operation.name$_Result(const $interface.name$_$operation.name$_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            m_$exception.formatedScopedname$_ex = x.m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$
    \}
\}

$interface.scopedname$_$operation.name$_Result::$interface.name$_$operation.name$_Result($interface.name$_$operation.name$_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            m_$exception.formatedScopedname$_ex = std::move(x.m_$exception.formatedScopedname$_ex);
            break;
        }; separator="\n"$
    \}
\}

$interface.scopedname$_$operation.name$_Result& $interface.scopedname$_$operation.name$_Result::operator=(const $interface.scopedname$_$operation.name$_Result &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = x.m_result;
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            m_$exception.formatedScopedname$_ex = x.m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$
    \}

    return *this;
\}

$interface.scopedname$_$operation.name$_Result& $interface.scopedname$_$operation.name$_Result::operator=($interface.scopedname$_$operation.name$_Result &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            m_result = std::move(x.m_result);
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            m_$exception.formatedScopedname$_ex = std::move(x.m_$exception.formatedScopedname$_ex);
            break;
        }; separator="\n"$
    \}

    return *this;
\}

void $interface.scopedname$_$operation.name$_Result::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    \}

    m__d = __d;
\}

int32_t $interface.scopedname$_$operation.name$_Result::_d() const
{
    return m__d;
\}

int32_t& $interface.scopedname$_$operation.name$_Result::_d()
{
    return m__d;
\}

void $interface.scopedname$_$operation.name$_Result::unknownEx(eprosima::rpc::protocol::dds::rpc::UnknownException _unknownEx)
{
    m_unknownEx = _unknownEx;
    m__d = 2;
\}

eprosima::rpc::protocol::dds::rpc::UnknownException $interface.scopedname$_$operation.name$_Result::unknownEx() const
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
\}

eprosima::rpc::protocol::dds::rpc::UnknownException& $interface.scopedname$_$operation.name$_Result::unknownEx()
{
    if(m__d != 2)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownEx;
\}

void $interface.scopedname$_$operation.name$_Result::result(const $interface.scopedname$_$operation.name$_Out &_result)
{
    m_result = _result;
    m__d = 0;
\}

void $interface.scopedname$_$operation.name$_Result::result($interface.scopedname$_$operation.name$_Out &&_result)
{
    m_result = std::move(_result);
    m__d = 0;
\}

const $interface.scopedname$_$operation.name$_Out& $interface.scopedname$_$operation.name$_Result::result() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
\}

$interface.scopedname$_$operation.name$_Out& $interface.scopedname$_$operation.name$_Result::result()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_result;
\}

$operation.exceptions:{ exception |$public_exception_union_member_declaration(class=[interface.scopedname, "_", operation.name, "_Result"], exception=exception)$}; separator="\n"$

size_t $interface.scopedname$_$operation.name$_Result::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // UnknowEx
    union_max_size_serialized = current_alignment;
    union_max_size_serialized += 1;

    reset_alignment = current_alignment;
    reset_alignment += $interface.scopedname$_$operation.name$_Out::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    $operation.exceptions : { exception |
    reset_alignment = current_alignment;

    reset_alignment += $exception.scopedname$::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
\}

size_t $interface.scopedname$_$operation.name$_Result::getCdrSerializedSize(const $interface.scopedname$_$operation.name$_Result& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            current_alignment += $interface.name$_$operation.name$_Out::getCdrSerializedSize(data.m_result, current_alignment);
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            current_alignment += $exception.scopedname$::getCdrSerializedSize(data.m_$exception.formatedScopedname$_ex, current_alignment);
            break;
        }; separator="\n"$
    \}

    return current_alignment - initial_alignment;
\}

void $interface.scopedname$_$operation.name$_Result::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            scdr << m_result;
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            scdr << m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$

        default:
            scdr << m_unknownEx;
            break;
    \}
\}

void $interface.scopedname$_$operation.name$_Result::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    switch(m__d)
    {
        case eprosima::rpc::protocol::dds::rpc::REMOTE_EX_OK:
            dcdr \>> m_result;
            break;
        $operation.exceptions : { exception |
        case (int32_t)$exception.md5$:
            dcdr \>> m_$exception.formatedScopedname$_ex;
            break;
        }; separator="\n"$

        default:
            dcdr \>> m_unknownEx;
            break;
    \}
\}

$endif$
}; separator="\n"$

$interface.scopedname$_Call::$interface.name$_Call() : m__d(0)
{
}

$interface.scopedname$_Call::~$interface.name$_Call()
{
}

$interface.scopedname$_Call::$interface.name$_Call(const $interface.name$_Call &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Call::$interface.name$_Call($interface.name$_Call &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
}

$interface.scopedname$_Call& $interface.scopedname$_Call::operator=(const $interface.name$_Call &x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }

    return *this;
}

$interface.scopedname$_Call& $interface.scopedname$_Call::operator=($interface.name$_Call &&x)
{
    m__d = x.m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }

    return *this;
}

void $interface.scopedname$_Call::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t $interface.scopedname$_Call::_d() const
{
    return m__d;
}

int32_t& $interface.scopedname$_Call::_d()
{
    return m__d;
}

void $interface.scopedname$_Call::unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp)
{
    m_unknownOp = _unknownOp;
    m__d = 0;
}

eprosima::rpc::protocol::dds::rpc::UnknownOperation $interface.scopedname$_Call::unknownOp() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownOp;
}

eprosima::rpc::protocol::dds::rpc::UnknownOperation& $interface.scopedname$_Call::unknownOp()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownOp;
}

$interface.all_operations : { operation |
void $interface.scopedname$_Call::$operation.name$(const $interface.scopedname$_$operation.name$_In &_$operation.name$)
{
    m_$operation.name$ = _$operation.name$;
    m__d = (int32_t)$operation.md5$;
\}

void $interface.scopedname$_Call::$operation.name$($interface.scopedname$_$operation.name$_In &&_$operation.name$)
{
    m_$operation.name$ = std::move(_$operation.name$);
    m__d = (int32_t)$operation.md5$;
\}

const $interface.scopedname$_$operation.name$_In& $interface.scopedname$_Call::$operation.name$() const
{
    if(m__d != (int32_t)$operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$operation.name$;
\}

$interface.scopedname$_$operation.name$_In& $interface.scopedname$_Call::$operation.name$()
{
    if(m__d != (int32_t)$operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$operation.name$;
\}
}; separator="\n"$

size_t $interface.scopedname$_Call::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknownOp attribute;
    union_max_size_serialized = current_alignment + 1;

    $interface.all_operations : { operation |
    reset_alignment = current_alignment;

    reset_alignment += $interface.scopedname$_$operation.name$_In::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

size_t $interface.scopedname$_Call::getCdrSerializedSize(const $interface.scopedname$_Call& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    switch(data.m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            current_alignment += $interface.name$_$operation.name$_In::getCdrSerializedSize(data.m_$operation.name$, current_alignment);
            break;
        }; separator="\n"$
    }

    return current_alignment - initial_alignment;
}

void $interface.scopedname$_Call::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            scdr << m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            scdr << m_unknownOp;
            break;
    }
}

void $interface.scopedname$_Call::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    switch(m__d)
    {
        $interface.all_operations : { operation |
        case (int32_t)$operation.md5$:
            dcdr \>> m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            dcdr \>> m_unknownOp;
            break;
    }
}

$interface.scopedname$_Request::$interface.name$_Request()
{
}

$interface.scopedname$_Request::~$interface.name$_Request()
{
}

$interface.scopedname$_Request::$interface.name$_Request(const $interface.name$_Request &x)
: m_header(x.m_header), m_data(x.m_data)
{
}

$interface.scopedname$_Request::$interface.name$_Request($interface.name$_Request &&x)
: m_header(std::move(x.m_header)), m_data(std::move(x.m_data))
{
}

$interface.scopedname$_Request& $interface.scopedname$_Request::operator=(const $interface.name$_Request &x)
{
    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

$interface.scopedname$_Request& $interface.scopedname$_Request::operator=($interface.name$_Request &&x)
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);

    return *this;
}

size_t $interface.scopedname$_Request::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment +=  eprosima::rpc::protocol::dds::rpc::RequestHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Call::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t $interface.scopedname$_Request::getCdrSerializedSize(const $interface.scopedname$_Request& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += data.m_header.getCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Call::getCdrSerializedSize(data.m_data, current_alignment);

    return current_alignment - initial_alignment;
}

void $interface.scopedname$_Request::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_data;
}

void $interface.scopedname$_Request::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m_header;
    dcdr \>> m_data;
}

$interface.scopedname$_Return::$interface.name$_Return() : m__d(0)
{
}

$interface.scopedname$_Return::~$interface.name$_Return()
{
}

$interface.scopedname$_Return::$interface.name$_Return(const $interface.name$_Return &x)
{
    m__d = x.m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
    $endif$
}

$interface.scopedname$_Return::$interface.name$_Return($interface.name$_Return &&x)
{
    m__d = x.m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
    $endif$
}

$interface.scopedname$_Return& $interface.scopedname$_Return::operator=(const $interface.name$_Return &x)
{
    m__d = x.m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = x.m_$operation.name$;
            break;
        }; separator="\n"$
    }
    $endif$

    return *this;
}

$interface.scopedname$_Return& $interface.scopedname$_Return::operator=($interface.name$_Return &&x)
{
    m__d = x.m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            m_$operation.name$ = std::move(x.m_$operation.name$);
            break;
        }; separator="\n"$
    }
    $endif$

    return *this;
}

void $interface.scopedname$_Return::_d(int32_t __d)
{
    if(m__d != __d)
    {
        throw eprosima::rpc::exception::BadParamException("Discriminator doesn't correspond with the selected union member");
    }

    m__d = __d;
}

int32_t $interface.scopedname$_Return::_d() const
{
    return m__d;
}

int32_t& $interface.scopedname$_Return::_d()
{
    return m__d;
}

void $interface.scopedname$_Return::unknownOp(eprosima::rpc::protocol::dds::rpc::UnknownOperation _unknownOp)
{
    m_unknownOp = _unknownOp;
    m__d = 0;
}

eprosima::rpc::protocol::dds::rpc::UnknownOperation $interface.scopedname$_Return::unknownOp() const
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownOp;
}

eprosima::rpc::protocol::dds::rpc::UnknownOperation& $interface.scopedname$_Return::unknownOp()
{
    if(m__d != 0)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_unknownOp;
}

$interface.notAllOnewayOperations : { operation |
void $interface.scopedname$_Return::$operation.name$(const $interface.scopedname$_$operation.name$_Result &_$operation.name$)
{
    m_$operation.name$ = _$operation.name$;
    m__d = (int32_t)$operation.md5$;
\}

void $interface.scopedname$_Return::$operation.name$($interface.scopedname$_$operation.name$_Result &&_$operation.name$)
{
    m_$operation.name$ = std::move(_$operation.name$);
    m__d = (int32_t)$operation.md5$;
\}

const $interface.scopedname$_$operation.name$_Result& $interface.scopedname$_Return::$operation.name$() const
{
    if(m__d != (int32_t)$operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$operation.name$;
\}

$interface.scopedname$_$operation.name$_Result& $interface.scopedname$_Return::$operation.name$()
{
    if(m__d != (int32_t)$operation.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$operation.name$;
\}
}; separator="\n"$

size_t $interface.scopedname$_Return::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    size_t reset_alignment = 0;
    size_t union_max_size_serialized = 0;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    // Default unknown_operation attribute;
    union_max_size_serialized = current_alignment + 1;

    $interface.notAllOnewayOperations : { operation |
    reset_alignment = current_alignment;

    reset_alignment += $interface.scopedname$_$operation.name$_Result::getMaxCdrSerializedSize(reset_alignment);

    if(union_max_size_serialized < reset_alignment)
        union_max_size_serialized = reset_alignment;

    }; separator="\n"$

    return union_max_size_serialized - initial_alignment;
}

size_t $interface.scopedname$_Return::getCdrSerializedSize(const $interface.scopedname$_Return& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    $if(interface.notAllOnewayOperations)$
    switch(data.m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            current_alignment += $interface.name$_$operation.name$_Result::getCdrSerializedSize(data.m_$operation.name$, current_alignment);
            break;
        }; separator="\n"$
    }
    $endif$

    return current_alignment - initial_alignment;
}

void $interface.scopedname$_Return::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            scdr << m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            scdr << m_unknownOp;
            break;
    }
    $endif$
}

void $interface.scopedname$_Return::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m__d;

    $if(interface.notAllOnewayOperations)$
    switch(m__d)
    {
        $interface.notAllOnewayOperations : { operation |
        case (int32_t)$operation.md5$:
            dcdr \>> m_$operation.name$;
            break;
        }; separator="\n"$
        default:
            dcdr \>>  m_unknownOp;
            break;
    }
    $endif$
}

$interface.scopedname$_Reply::$interface.name$_Reply()
{
}

$interface.scopedname$_Reply::~$interface.name$_Reply()
{
}

$interface.scopedname$_Reply::$interface.name$_Reply(const $interface.name$_Reply &x)
: m_header(x.m_header), m_data(x.m_data)
{
}

$interface.scopedname$_Reply::$interface.name$_Reply($interface.name$_Reply &&x)
: m_header(std::move(x.m_header)), m_data(std::move(x.m_data))
{
}

$interface.scopedname$_Reply& $interface.scopedname$_Reply::operator=(const $interface.name$_Reply &x)
{
    m_header = x.m_header;
    m_data = x.m_data;

    return *this;
}

$interface.scopedname$_Reply& $interface.scopedname$_Reply::operator=($interface.name$_Reply &&x)
{
    m_header = std::move(x.m_header);
    m_data = std::move(x.m_data);

    return *this;
}

size_t $interface.scopedname$_Reply::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
    current_alignment +=  eprosima::rpc::protocol::dds::rpc::ReplyHeader::getMaxCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Return::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t $interface.scopedname$_Reply::getCdrSerializedSize(const $interface.scopedname$_Reply& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += data.m_header.getCdrSerializedSize(current_alignment);
    current_alignment += $interface.name$_Return::getCdrSerializedSize(data.m_data, current_alignment);

    return current_alignment - initial_alignment;
}

void $interface.scopedname$_Reply::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_header;
    scdr << m_data;
}

void $interface.scopedname$_Reply::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr \>> m_header;
    dcdr \>> m_data;
}
>>

/***** Utils *****/

parameters_default_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |$parameter_default_init(param)$}; separator=", "$$endif$
>>

// TODO Juntar con TypesSource.stg y TypesHeaders.stg de FastBuffers.
parameter_default_init(param) ::= <<
$if(param.typecode.primitive)$
m_$param.name$($param.typecode.initialValue$)
$else$
m_$param.name$()
$endif$
>>

parameters_copy_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |m_$param.name$(x.m_$param.name$)}; separator=", "$$endif$
>>

parameters_move_init(parameters) ::= <<
$if(parameters)$: $parameters:{ param |m_$param.name$(std::move(x.m_$param.name$))}; separator=", "$$endif$
>>

parameters_copy_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>

parameters_move_assigment(param) ::= <<
m_$param.name$ = x.m_$param.name$;
>>

public_exception_union_member_declaration(class, exception) ::= <<
void $class$::$exception.formatedScopedname$_ex(const $exception.scopedname$ &_$exception.formatedScopedname$_ex)
{
    m_$exception.formatedScopedname$_ex = _$exception.formatedScopedname$_ex;
    m__d = (int32_t)$exception.md5$;
}

void $class$::$exception.formatedScopedname$_ex($exception.scopedname$ &&_$exception.formatedScopedname$_ex)
{
    m_$exception.formatedScopedname$_ex = std::move(_$exception.formatedScopedname$_ex);
    m__d = (int32_t)$exception.md5$;
}

const $exception.scopedname$& $class$::$exception.formatedScopedname$_ex() const
{
    if(m__d != (int32_t)$exception.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$exception.formatedScopedname$_ex;
}

$exception.scopedname$& $class$::$exception.formatedScopedname$_ex()
{
    if(m__d != (int32_t)$exception.md5$)
        throw eprosima::rpc::exception::BadParamException("This member is not been selected");

    return m_$exception.formatedScopedname$_ex;
}
>>
