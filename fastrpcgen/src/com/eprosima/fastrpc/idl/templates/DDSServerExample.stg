group ServiceExample;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "ServerExample.cxx"], description=["This source file shows a simple example of how to create a server for an interface."])$

#include "$ctx.filename$Server.h"
#include <$ctx.includePrefix$strategies/ThreadPoolStrategy.h>
#include "$ctx.filename$DDSProtocol.h"
#include <$ctx.includePrefix$transports/dds/UDPServerTransport.h>
#include <$ctx.includePrefix$exceptions/Exceptions.h>
#include <$ctx.includePrefix$utils/Utilities.h>
#include "$ctx.filename$ServerImplExample.h"

#include <iostream>

using namespace eprosima::rpc;
using namespace ::exception;
using namespace ::strategy;
using namespace ::transport::dds;
using namespace ::protocol::dds;

int main(int argc, char **argv)
{
    unsigned int threadPoolSize = 5;
    ThreadPoolStrategy *pool = NULL;
    $ctx.filename$Protocol *protocol = NULL;
    UDPServerTransport *transport = NULL;
    $first(ctx.scopedInterfaces).scopedname$Server *server = NULL;
    $first(ctx.scopedInterfaces).name$ServerImplExample servant;

    // Create and initialize the server for interface "$first(ctx.scopedInterfaces).scopedname$".
    try
    {
        pool = new ThreadPoolStrategy(threadPoolSize);
        protocol = new $ctx.filename$Protocol();
        transport = new UDPServerTransport("$ctx.filename$Service", "Instance");
        server = new $first(ctx.scopedInterfaces).scopedname$Server(*pool, *transport, *protocol, servant);
        server->serve();
    }
    catch(InitializeException &ex)
    {
        std::cout << ex.what() << std::endl;
        return -1;
    }

    while(1)
    {
        eprosima::rpc::sleep(10000);
    }

    // Stop and delete the server.
    server->stop();
    delete server;
    delete protocol;
    delete transport;
    delete pool;

    return 0;
}

$definitions; separator="\n"$
>>
