group RTIExtensionHeader;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Extension.h"], description=["This header file contains the declaration of user exceptions in ", ctx.filename, ".idl"])$

#ifndef _$ctx.filename;format="toUpper"$EXTENSION_H_
#define _$ctx.filename;format="toUpper"$EXTENSION_H_

#include <$ctx.includePrefix$exceptions/UserException.h>
#include "$ctx.filename$Support.h"

$ctx.directIncludeDependencies : {include | #include "$include$Extension.h"}; separator="\n"$

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$EXTENSION_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}

>>

interface(ctx, parent, interface, export_list) ::= <<
namespace $interface.name$
{
    $export_list$
}

class RPCUSERDllExport $interface.name$Ext $if(interface.bases)$: $interface.bases : {base |public $base.scopedname$Ext}; separator=", "$$endif$
{
    public:

        $interface.operations : { operation |
            virtual $paramRetType(operation.rettype)$ $operation.name$($paramDeclarations(params=operation.parameters)$) = 0;
        }; separator="\n"$
};
>>

exception(ctx, parent, exception) ::= <<
/*!
 * @brief This class implementes the user exception $exception.scopedname$
 * @ingroup $ctx.trimfilename$
 */
class RPCUSERDllExport $exception.name$ : public eprosima::rpc::exception::UserException
{
public:

    //! @brief Default constructor.
    $exception.name$();

    /*!
     * @brief Copy constructor.
     * @param ex Exception to be copied.
     */
    $exception.name$(const $exception.name$ &ex);

    /*!
     * @brief Copy constructor.
     * @param ex Exception to be copied.
     */
    $exception.name$($exception.name$&& ex);

    /*!
     * @brief Copy assignment.
     * @param ex Exception to be copied.
     */
    $exception.name$& operator=(const $exception.name$ &ex);

    /*!
     * @brief Copy assignment.
     * @param ex Exception to be copied.
     */
    $exception.name$& operator=($exception.name$&& ex);

    /*!
     * @brief Destructor.
     */
    virtual ~$exception.name$() throw();

    //! @brief This function throws the object as exception.
    virtual void raise() const;

    // Exception members
    $exception.members : { member | $member.typecode.cppTypename$ $member.name$$if(member.typecode.isType_f)$$member.typecode.arrayExtension$$endif$; }; separator="\n"$
};

>>
