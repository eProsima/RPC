/*************************************************************************
 * Copyright (c) 2013 eProsima. All rights reserved.
 *
 * This copy of FASTRPC is licensed to you under the terms described in the
 * FASTRPC_LICENSE file included in this distribution.
 *
 *************************************************************************/

group TopicsPluginHeaderByOperation;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "TopicsPlugin.h"], description=["This header file contains the declaration of used by DDS middleware."])$

#ifndef _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_
#define _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_

$if(first(ctx.scopedInterfaces))$
#include "$ctx.filename$Topics.h"
$endif$

$ctx.directIncludeDependencies : {include | #include "$include$TopicsPlugin.h"}; separator="\n"$

#include <$ctx.includePrefix$utils/dds/Middleware.h>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define user_cpp_DllExport __declspec( dllexport )
#else
#define user_cpp_DllExport
#endif
#else
#define user_cpp_DllExport
#endif

$definitions; separator="\n"$

#endif // _$ctx.filename;format="toUpper"$_TOPICS_PLUGIN_H_
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
}
>>

interface(ctx, parent, interface, export_list) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $interface.name$Plugin
{
    public:

        $export_list$

        $interface.all_operations : { operation |
        /*!
         * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
         */
        class user_cpp_DllExport $operation.name$_InPlugin
        {
            public:

                static DDS_TypeCode* get_typecode();
        };

        /*!
         * @brief Request DataReader.
         */
        class user_cpp_DllExport $operation.name$_RequestDataReader : public DDSDataReader
        {
            public:

                $operation.name$_RequestDataReader(DDSDataReader *impl) : DDSDataReader(impl){}
        };

        /*!
         * @brief Request DataWriter.
         */
        class user_cpp_DllExport $operation.name$_RequestDataWriter : public DDSDataWriter
        {
            public:

                $operation.name$_RequestDataWriter(DDSDataWriter *impl) : DDSDataWriter(impl){}
        };

        /*!
         * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
         */
        class user_cpp_DllExport $operation.name$_RequestPlugin : public DDSTypeSupport
        {
            public:

                static const char* get_typename();

                static $interface.name$_$operation.name$_Request* create_data(void);

                static void destroy_data($interface.name$_$operation.name$_Request *sample);

                static void copy_data($interface.name$_$operation.name$_Request *dst,
                    const $interface.name$_$operation.name$_Request *src);

                static unsigned int get_serialized_sample_max_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment);

                static unsigned int get_serialized_sample_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment,
                    const $interface.name$_$operation.name$_Request * sample);

                static unsigned int get_serialized_sample_min_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment);

                static PRESTypePluginParticipantData on_participant_attached(
                    void *registration_data,
                    const struct PRESTypePluginParticipantInfo *participant_info,
                    RTIBool top_level_registration,
                    void *container_plugin_context,
                    RTICdrTypeCode *typeCode);

                static void on_participant_detached(
                    PRESTypePluginParticipantData participant_data);

                static PRESTypePluginEndpointData on_endpoint_attached(
                    PRESTypePluginParticipantData participant_data,
                    const struct PRESTypePluginEndpointInfo *endpoint_info,
                    RTIBool top_level_registration,
                    void *container_plugin_context);

                static void on_endpoint_detached(
                    PRESTypePluginEndpointData endpoint_data);

                static RTIBool copy_sample(
                    PRESTypePluginEndpointData endpoint_data,
                    $interface.name$_$operation.name$_Request *dst,
                    const $interface.name$_$operation.name$_Request *src);

                static RTIBool serialize(PRESTypePluginEndpointData endpoint_data,
                    const $interface.name$_$operation.name$_Request *sample,
                    struct RTICdrStream *stream,
                    RTIBool serialize_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    RTIBool serialize_sample,
                    void *endpoint_plugin_qos);

                static RTIBool deserialize(PRESTypePluginEndpointData endpoint_data,
                    $interface.name$_$operation.name$_Request **sample,
                    RTIBool * drop_sample,
                    struct RTICdrStream *stream,
                    RTIBool deserialize_encapsulation,
                    RTIBool deserialize_sample,
                    void *endpoint_plugin_qos);

                static PRESTypePluginKeyKind get_key_kind(void);

                static DDS_TypeCode* get_typecode();

                static struct PRESTypePlugin *new_plugin(void);

                static void delete_plugin(struct PRESTypePlugin *plugin);

                // TODO cambiar a isDDS.
                $if(ctx.dds)$
                /*! TODO Mover al transporte */
                static bool register_type(DDSDomainParticipant *participant, const char *type_name);

                // TODO unregister_type.
                $endif$

                DDSDataReader* create_datareaderI(DDSDataReader* dataReader);

                DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);

                DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);

                DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);

            private:

                static const char *m_typename;
        };

        // Reply operations
        $if(!operation.oneway)$
        class user_cpp_DllExport $operation.name$_OutPlugin
        {
            public:

                static DDS_TypeCode* get_typecode();
        };

        /*!
         * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
         */
        class user_cpp_DllExport $operation.name$_ResultPlugin : public DDSTypeSupport
        {
            public:

                static DDS_TypeCode* get_typecode();
        };

        /*!
         * @brief Reply DataReader.
         */
        class user_cpp_DllExport $operation.name$_ReplyDataReader : public DDSDataReader
        {
            public:

                $operation.name$_ReplyDataReader(DDSDataReader *impl) : DDSDataReader(impl){}
        };

        /*!
         * @brief Reply DataWriter.
         */
        class user_cpp_DllExport $operation.name$_ReplyDataWriter : public DDSDataWriter
        {
            public:

                $operation.name$_ReplyDataWriter(DDSDataWriter *impl) : DDSDataWriter(impl){}
        };

        /*!
         * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
         */
        class user_cpp_DllExport $operation.name$_ReplyPlugin : public DDSTypeSupport
        {
            public:

                static const char* get_typename();

                static $interface.name$_$operation.name$_Reply* create_data(void);

                static void destroy_data($interface.name$_$operation.name$_Reply *sample);

                static void copy_data($interface.name$_$operation.name$_Reply *dst,
                    const $interface.name$_$operation.name$_Reply *src);

                static unsigned int get_serialized_sample_max_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment);

                static unsigned int get_serialized_sample_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment,
                    const $interface.name$_$operation.name$_Reply * sample);

                static unsigned int get_serialized_sample_min_size(
                    PRESTypePluginEndpointData endpoint_data,
                    RTIBool include_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    unsigned int current_alignment);

                static PRESTypePluginParticipantData on_participant_attached(
                    void *registration_data,
                    const struct PRESTypePluginParticipantInfo *participant_info,
                    RTIBool top_level_registration,
                    void *container_plugin_context,
                    RTICdrTypeCode *typeCode);

                static void on_participant_detached(PRESTypePluginParticipantData participant_data);

                static PRESTypePluginEndpointData on_endpoint_attached(
                    PRESTypePluginParticipantData participant_data,
                    const struct PRESTypePluginEndpointInfo *endpoint_info,
                    RTIBool top_level_registration,
                    void *container_plugin_context);

                static void on_endpoint_detached(PRESTypePluginEndpointData endpoint_data);

                static RTIBool copy_sample(PRESTypePluginEndpointData endpoint_data,
                    $interface.name$_$operation.name$_Reply *dst,
                    const $interface.name$_$operation.name$_Reply *src);

                static RTIBool serialize(PRESTypePluginEndpointData endpoint_data,
                    const $interface.name$_$operation.name$_Reply *sample,
                    struct RTICdrStream *stream,
                    RTIBool serialize_encapsulation,
                    RTIEncapsulationId encapsulation_id,
                    RTIBool serialize_sample,
                    void *endpoint_plugin_qos);

                static RTIBool deserialize(PRESTypePluginEndpointData endpoint_data,
                    $interface.name$_$operation.name$_Reply **sample,
                    RTIBool * drop_sample,
                    struct RTICdrStream *stream,
                    RTIBool deserialize_encapsulation,
                    RTIBool deserialize_sample,
                    void *endpoint_plugin_qos);

                static PRESTypePluginKeyKind get_key_kind(void);

                static DDS_TypeCode* get_typecode();

                static struct PRESTypePlugin* new_plugin(void);

                static void delete_plugin(struct PRESTypePlugin *plugin);

                // TODO cambiar a isDDS.
                $if(ctx.dds)$
                /*! TODO Mover al transporte */
                static bool register_type(DDSDomainParticipant *participant, const char *type_name);

                // TODO unregister_type.
                $endif$

                DDSDataReader* create_datareaderI(DDSDataReader* dataReader);

                DDS_ReturnCode_t destroy_datareaderI(DDSDataReader* dataReader);

                DDSDataWriter* create_datawriterI(DDSDataWriter* dataWriter);

                DDS_ReturnCode_t destroy_datawriterI(DDSDataWriter* dataWriter);

            private:

                static const char *m_typename;
        };
        $endif$
        }; separator="\n"$

    private:

        $interface.name$Plugin(){}
};
>>

exception(ctx, parent, exception) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $exception.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();

};
>>

typedef_decl(ctx, parent, typedefs, typedefs_type, declarator_type) ::= <<
$typedefs : { typedef |
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $typedef.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();

};
}; separator="\n"$
>>

struct_type(ctx, parent, struct, extensions, member_list) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $struct.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();

};
>>

union_type(ctx, parent, union, extensions, switch_type) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $union.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();

};
>>

enum_type(ctx, parent, enum) ::= <<
/*!
 * @brief This class encapsulates the methods used on DDS topics by DDS middleware.
 */
class user_cpp_DllExport $enum.name$Plugin
{
    public:

        static DDS_TypeCode* get_typecode();

};
>>
