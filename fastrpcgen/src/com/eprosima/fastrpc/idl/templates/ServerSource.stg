group ServerSource;

import "eprosima.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "Server.cxx"], description=["This source file contains the definition of the server for all interfaces."])$

#include "$ctx.filename$Server.h"
#include <$ctx.includePrefix$strategies/ServerStrategy.h>
#include <$ctx.includePrefix$transports/ServerTransport.h>
#include "$ctx.filename$Protocol.h"
#include <$ctx.includePrefix$exceptions/ServerInternalException.h>

$definitions; separator="\n"$
>>

module(ctx, parent, module, definition_list) ::= <<
namespace $module.name$
{
    $definition_list$
};

>>

/*!
 * The export_list will be the definition of synchronize functions.
 */
interface(ctx, parent, interface, export_list) ::= <<
$interface.name$Server::$interface.name$Server(eprosima::rpc::strategy::ServerStrategy &strategy, eprosima::rpc::transport::ServerTransport &transport,
            eprosima::rpc::protocol::$ctx.filename$Protocol &protocol, $interface.name$ServerImpl &servant) :
    Server(strategy, transport, protocol), _impl(servant)
{
   protocol.activateInterface("$interface.scopedname$");
   protocol.link$interface.formatedScopedname$Impl(servant);
}

$interface.name$Server::~$interface.name$Server()
{
    //TODO Unlink an deactivate.
}

$export_list$

>>
