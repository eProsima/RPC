group DDSProtocolHeaderByOperation;

import "eprosima.stg"
import "com/eprosima/fastcdr/idl/templates/FastCdrCommon.stg"

main(ctx, definitions) ::= <<
$fileHeader(ctx=ctx,  file=[ctx.filename, "DDSProtocol.h"], description=["This header file contains the declaration of the protocol used to create DDS messages."])$

#ifndef _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_
#define _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_

#include "$ctx.filename$Protocol.h"
#include <$ctx.includePrefix$utils/Messages.h>
$ctx.includeDependencies : { include |#include "$include$.h"}; separator="\n"$

#include "$ctx.filename$TopicsPlugin.h"

namespace eprosima
{
    namespace rpc
    {
        namespace transport
        {
            namespace dds
            {
                $if(ctx.client)$
                class RTPSProxyProcedureEndpoint;
                $endif$
                $if(ctx.server)$
                class RTPSServerProcedureEndpoint;
                $endif$
                class RTPSTransport;
            }
        }

        namespace protocol
        {
            namespace dds
            {
                /*!
                 * @brief This class is responsible for serializing and deserializing the requests and responses of this application.
                 *  It uses DDS.
		         * @ingroup $ctx.trimfilename$
                 */
                class  $ctx.filename$Protocol : public eprosima::rpc::protocol::$ctx.filename$Protocol
                {
                    public:

                       /*!
                        * @brief Default constructor
                        */
                        RPCUSERDllExport $ctx.filename$Protocol();

                       /*!
                        * @brief Destructor
                        */
                        virtual RPCUSERDllExport ~$ctx.filename$Protocol();

                       /*!
                        * @brief This method sets the transport for the communications.
                        * @param transport Transport to use
                        * @return True if the assignment is successful, false otherwise
                        */
                        virtual RPCUSERDllExport bool setTransport(eprosima::rpc::transport::Transport &transport);

                        /*!
                         * @brief This function activates needed DDS entities to use an interface.
                         * @param interfaceName Interface name.
                         * @return Whether the activation works successfully.
                         */
                        RPCUSERDllExport bool activateInterface(const char* interfaceName);

                        $definitions; separator="\n"$

                    private:

                        eprosima::rpc::transport::dds::RTPSTransport *m_ddsTransport;

                        $ctx.scopedInterfaces : { interface |
                        $interface.all_operations : { operation |
                        const char* const $interface.formatedScopedname$_$operation.name$_str;

                        $if(ctx.client)$
                        eprosima::rpc::transport::dds::RTPSProxyProcedureEndpoint *$interface.formatedScopedname$_$operation.name$_pe;
                        $endif$

                        $if(ctx.server)$
                        eprosima::rpc::transport::dds::RTPSServerProcedureEndpoint *$interface.formatedScopedname$_$operation.name$_se;
                        $endif$

                        $interface.scopedname$Plugin::$operation.name$_RequestPlugin $interface.formatedScopedname$_$operation.name$_requestPlugin;
                        $if(!operation.oneway)$
                        $interface.scopedname$Plugin::$operation.name$_ReplyPlugin $interface.formatedScopedname$_$operation.name$_replyPlugin;
                        $endif$

                        }; separator="\n"$
                        }; separator="\n"$
                };
            } // namespace dds
        } // namespace protocol
    } // namespace rpc
} // namespace eprosima

#endif // _$ctx.filename;format="toUpper"$_DDS_PROTOCOL_H_
>>

interface(ctx, parent, interface, export_list) ::= <<
$interface.all_operations : {operation|
$if(ctx.client)$
/*!
 * @brief This method implements the proxy part of the protocol for the operation $operation.name$.
 * It is called from the Proxy interface.
 */
RPCUSERDllExport $paramRetType(operation.rettype)$ $interface.formatedScopedname$_$operation.name$(
        $paramDeclarations(params=operation.parameters)$);

$if(!operation.oneway)$
/*!
 * @brief This asynchronous method implements the proxy part of the protocol for the operation $operation.name$.
 * It is called from the Proxy interface.
 */
RPCUSERDllExport void $interface.formatedScopedname$_$operation.name$_async(
        $interface.scopedname$_$operation.name$CallbackHandler &obj$paramDeclarations(params=operation.inputparam, initialSeparator=", ")$);

$endif$
$endif$

$if(ctx.server)$
/*!
 * @brief This method implements the server part of the protocol for the operation $operation.name$.
 * It is called when a request sample is received.
 * @param protocol DDS protocol object that is in used.
 * @param data Pointer to the received request sample. Cannot be NULL.
 * @param endpoint Pointer to the endpoint that sent the request reply. Cannot be NULL.
 */
RPCUSERDllExport static void $interface.formatedScopedname$_$operation.name$_serve(eprosima::rpc::protocol::Protocol &protocol,
    void *data , eprosima::rpc::transport::Endpoint *endpoint);
$endif$
}; separator="\n"$

$export_list$
>>
