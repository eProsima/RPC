// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

group FastCdrCommon;

paramRetType(typecode) ::= <%
$if(typecode)$
$typecode.cppTypename$
$else$
void
$endif$
%>

paramTypeByRef(typecode) ::= <%
$typecode.cppTypename$&
%>

paramDeclarations(params, initialSeparator="") ::= <<
$if(params)$$initialSeparator$$endif$$params : {param | /*$param.comment$*/ $if(param.output)$$paramTypeByRef(typecode=param.typecode)$$else$$paramTypeByValue(typecode=param.typecode)$$endif$ $param.name$}; anchor, separator=",\n"$
>>

paramDeclarationsByValue(params, initialSeparator="") ::= <<
$if(params)$$initialSeparator$$endif$$params : {param | /*$param.comment$*/ $paramTypeByValue(typecode=param.typecode)$ $param.name$}; anchor, separator=",\n"$
>>

object_serialization(ctx, object) ::= <<
scdr << eprosima::fastcdr::MemberId($object.id$) << $object.name$();
>>

bitfield_serialization(ctx, object) ::= <<$if(member.name)$
scdr << static_cast<$member.spec.cppTypename$>($member.name$());$endif$
>>

object_deserialization(ctx, object) ::= <<
dcdr \>> $object.name$();
>>

bitfield_deserialization(ctx, object) ::= <<$if(member.name)$$member.spec.cppTypename$ aux_$member.name$;
dcdr \>> aux_$member.name$;
$member.name$(aux_$member.name$);$endif$
>>

member_type_declaration(member) ::= <%
$if(member.annotationOptional)$
    eprosima::fastcdr::optional<
$endif$
$if(member.annotationExternal)$
    eprosima::fastcdr::external<
$endif$

$member.typecode.cppTypename$

$if(member.annotationExternal)$
    >
$endif$
$if(member.annotationOptional)$
    >
$endif$
%>

serializeCasting(typecode) ::= <<
$if(typecode.isType_c)$(uint32_t)$elseif(typecode.isBitmaskType)$($typecode.castingType$)$elseif(typecode.forwarded)$*$endif$
>>

deserializePossibleEnum(typecode, name, preffix) ::= <<
$if(typecode.isType_c)$
{
    uint32_t enum_value = 0;
    dcdr \>> enum_value;
    $preffix$$name$ = ($typecode.scopedname$)enum_value;
}
$elseif(typecode.isBitmaskType)$
{
    $typecode.castingType$ bitmask_value = 0;
    dcdr \>> bitmask_value;
    $preffix$$name$ = ($typecode.scopedname$)bitmask_value;
}

$elseif(ctx.generateTypesC)$
$if(typecode.isStringType)$
{
    std::string aux;
    dcdr \>> aux;
    free($preffix$$name$);
    $preffix$$name$ = (char*)malloc(aux.size() + 1);
    strncpy($preffix$$name$, aux.c_str(), aux.size() + 1);
}
$else$
dcdr \>> $if(typecode.forwarded)$*$endif$$preffix$$name$;
$endif$
$else$
dcdr \>> $if(typecode.forwarded)$*$endif$$preffix$$name$;
$endif$
>>

cdrIndexName(name, loopvar) ::= <<$name$[$loopvar$]>>

cdrMemberName(name, preffix) ::= <<$preffix$$name$>>

const_decl(ctx, parent, const) ::= <<>>
